diff --git a/node_modules/@monaco-editor/loader/lib/cjs/config/index.js b/node_modules/@monaco-editor/loader/lib/cjs/config/index.js
index 89955cd..9e03fea 100644
--- a/node_modules/@monaco-editor/loader/lib/cjs/config/index.js
+++ b/node_modules/@monaco-editor/loader/lib/cjs/config/index.js
@@ -4,7 +4,7 @@ Object.defineProperty(exports, '__esModule', { value: true });
 
 var config = {
   paths: {
-    vs: 'https://cdn.jsdelivr.net/npm/monaco-editor@0.33.0/min/vs'
+    vs: '/vs'
   }
 };
 
diff --git a/node_modules/@monaco-editor/loader/lib/es/config/index.js b/node_modules/@monaco-editor/loader/lib/es/config/index.js
index 956a5f5..fb9e6f6 100644
--- a/node_modules/@monaco-editor/loader/lib/es/config/index.js
+++ b/node_modules/@monaco-editor/loader/lib/es/config/index.js
@@ -1,7 +1,7 @@
 var config = {
   paths: {
-    vs: 'https://cdn.jsdelivr.net/npm/monaco-editor@0.33.0/min/vs'
-  }
+    vs: '/vs',
+  },
 };
 
 export default config;
diff --git a/node_modules/@monaco-editor/loader/lib/umd/monaco-loader.js b/node_modules/@monaco-editor/loader/lib/umd/monaco-loader.js
index 51e17c6..e78e1ec 100644
--- a/node_modules/@monaco-editor/loader/lib/umd/monaco-loader.js
+++ b/node_modules/@monaco-editor/loader/lib/umd/monaco-loader.js
@@ -1,8 +1,11 @@
 (function (global, factory) {
-  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
-  typeof define === 'function' && define.amd ? define(factory) :
-  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.monaco_loader = factory());
-}(this, (function () { 'use strict';
+  typeof exports === 'object' && typeof module !== 'undefined'
+    ? (module.exports = factory())
+    : typeof define === 'function' && define.amd
+    ? define(factory)
+    : ((global = typeof globalThis !== 'undefined' ? globalThis : global || self), (global.monaco_loader = factory()));
+})(this, function () {
+  'use strict';
 
   function _defineProperty(obj, key, value) {
     if (key in obj) {
@@ -10,7 +13,7 @@
         value: value,
         enumerable: true,
         configurable: true,
-        writable: true
+        writable: true,
       });
     } else {
       obj[key] = value;
@@ -24,9 +27,10 @@
 
     if (Object.getOwnPropertySymbols) {
       var symbols = Object.getOwnPropertySymbols(object);
-      if (enumerableOnly) symbols = symbols.filter(function (sym) {
-        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
-      });
+      if (enumerableOnly)
+        symbols = symbols.filter(function (sym) {
+          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
+        });
       keys.push.apply(keys, symbols);
     }
 
@@ -90,7 +94,9 @@
   }
 
   function _slicedToArray(arr, i) {
-    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
+    return (
+      _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest()
+    );
   }
 
   function _arrayWithHoles(arr) {
@@ -98,7 +104,7 @@
   }
 
   function _iterableToArrayLimit(arr, i) {
-    if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
+    if (typeof Symbol === 'undefined' || !(Symbol.iterator in Object(arr))) return;
     var _arr = [];
     var _n = true;
     var _d = false;
@@ -115,7 +121,7 @@
       _e = err;
     } finally {
       try {
-        if (!_n && _i["return"] != null) _i["return"]();
+        if (!_n && _i['return'] != null) _i['return']();
       } finally {
         if (_d) throw _e;
       }
@@ -126,11 +132,11 @@
 
   function _unsupportedIterableToArray(o, minLen) {
     if (!o) return;
-    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
+    if (typeof o === 'string') return _arrayLikeToArray(o, minLen);
     var n = Object.prototype.toString.call(o).slice(8, -1);
-    if (n === "Object" && o.constructor) n = o.constructor.name;
-    if (n === "Map" || n === "Set") return Array.from(o);
-    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
+    if (n === 'Object' && o.constructor) n = o.constructor.name;
+    if (n === 'Map' || n === 'Set') return Array.from(o);
+    if (n === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
   }
 
   function _arrayLikeToArray(arr, len) {
@@ -142,7 +148,9 @@
   }
 
   function _nonIterableRest() {
-    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
+    throw new TypeError(
+      'Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
+    );
   }
 
   function _defineProperty$1(obj, key, value) {
@@ -151,7 +159,7 @@
         value: value,
         enumerable: true,
         configurable: true,
-        writable: true
+        writable: true,
       });
     } else {
       obj[key] = value;
@@ -165,9 +173,10 @@
 
     if (Object.getOwnPropertySymbols) {
       var symbols = Object.getOwnPropertySymbols(object);
-      if (enumerableOnly) symbols = symbols.filter(function (sym) {
-        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
-      });
+      if (enumerableOnly)
+        symbols = symbols.filter(function (sym) {
+          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
+        });
       keys.push.apply(keys, symbols);
     }
 
@@ -214,13 +223,15 @@
         args[_key2] = arguments[_key2];
       }
 
-      return args.length >= fn.length ? fn.apply(this, args) : function () {
-        for (var _len3 = arguments.length, nextArgs = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
-          nextArgs[_key3] = arguments[_key3];
-        }
+      return args.length >= fn.length
+        ? fn.apply(this, args)
+        : function () {
+            for (var _len3 = arguments.length, nextArgs = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
+              nextArgs[_key3] = arguments[_key3];
+            }
 
-        return curried.apply(_this, [].concat(args, nextArgs));
-      };
+            return curried.apply(_this, [].concat(args, nextArgs));
+          };
     };
   }
 
@@ -242,9 +253,12 @@
 
   function validateChanges(initial, changes) {
     if (!isObject(changes)) errorHandler('changeType');
-    if (Object.keys(changes).some(function (field) {
-      return !hasOwnProperty(initial, field);
-    })) errorHandler('changeField');
+    if (
+      Object.keys(changes).some(function (field) {
+        return !hasOwnProperty(initial, field);
+      })
+    )
+      errorHandler('changeField');
     return changes;
   }
 
@@ -254,9 +268,13 @@
 
   function validateHandler(handler) {
     if (!(isFunction(handler) || isObject(handler))) errorHandler('handlerType');
-    if (isObject(handler) && Object.values(handler).some(function (_handler) {
-      return !isFunction(_handler);
-    })) errorHandler('handlersType');
+    if (
+      isObject(handler) &&
+      Object.values(handler).some(function (_handler) {
+        return !isFunction(_handler);
+      })
+    )
+      errorHandler('handlersType');
   }
 
   function validateInitial(initial) {
@@ -266,26 +284,26 @@
   }
 
   function throwError(errorMessages, type) {
-    throw new Error(errorMessages[type] || errorMessages["default"]);
+    throw new Error(errorMessages[type] || errorMessages['default']);
   }
 
   var errorMessages = {
     initialIsRequired: 'initial state is required',
     initialType: 'initial state should be an object',
-    initialContent: 'initial state shouldn\'t be an empty object',
+    initialContent: "initial state shouldn't be an empty object",
     handlerType: 'handler should be an object or a function',
     handlersType: 'all handlers should be a functions',
     selectorType: 'selector should be a function',
     changeType: 'provided value of changes should be an object',
     changeField: 'it seams you want to change a field in the state which is not specified in the "initial" state',
-    "default": 'an unknown error accured in `state-local` package'
+    default: 'an unknown error accured in `state-local` package',
   };
   var errorHandler = curry(throwError)(errorMessages);
   var validators = {
     changes: validateChanges,
     selector: validateSelector,
     handler: validateHandler,
-    initial: validateInitial
+    initial: validateInitial,
   };
 
   function create(initial) {
@@ -293,7 +311,7 @@
     validators.initial(initial);
     validators.handler(handler);
     var state = {
-      current: initial
+      current: initial,
     };
     var didUpdate = curry(didStateUpdate)(state, handler);
     var update = curry(updateState)(state);
@@ -301,9 +319,12 @@
     var getChanges = curry(extractChanges)(state);
 
     function getState() {
-      var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function (state) {
-        return state;
-      };
+      var selector =
+        arguments.length > 0 && arguments[0] !== undefined
+          ? arguments[0]
+          : function (state) {
+              return state;
+            };
       validators.selector(selector);
       return selector(state.current);
     }
@@ -325,22 +346,26 @@
   }
 
   function didStateUpdate(state, handler, changes) {
-    isFunction(handler) ? handler(state.current) : Object.keys(changes).forEach(function (field) {
-      var _handler$field;
-
-      return (_handler$field = handler[field]) === null || _handler$field === void 0 ? void 0 : _handler$field.call(handler, state.current[field]);
-    });
+    isFunction(handler)
+      ? handler(state.current)
+      : Object.keys(changes).forEach(function (field) {
+          var _handler$field;
+
+          return (_handler$field = handler[field]) === null || _handler$field === void 0
+            ? void 0
+            : _handler$field.call(handler, state.current[field]);
+        });
     return changes;
   }
 
   var index = {
-    create: create
+    create: create,
   };
 
   var config = {
     paths: {
-      vs: 'https://cdn.jsdelivr.net/npm/monaco-editor@0.33.0/min/vs'
-    }
+      vs: '/vs',
+    },
   };
 
   function curry$1(fn) {
@@ -351,13 +376,15 @@
         args[_key] = arguments[_key];
       }
 
-      return args.length >= fn.length ? fn.apply(this, args) : function () {
-        for (var _len2 = arguments.length, nextArgs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
-          nextArgs[_key2] = arguments[_key2];
-        }
+      return args.length >= fn.length
+        ? fn.apply(this, args)
+        : function () {
+            for (var _len2 = arguments.length, nextArgs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
+              nextArgs[_key2] = arguments[_key2];
+            }
 
-        return curried.apply(_this, [].concat(args, nextArgs));
-      };
+            return curried.apply(_this, [].concat(args, nextArgs));
+          };
     };
   }
 
@@ -379,8 +406,8 @@
       informAboutDeprecation();
       return {
         paths: {
-          vs: config.urls.monacoBase
-        }
+          vs: config.urls.monacoBase,
+        },
       };
     }
 
@@ -390,24 +417,24 @@
    * logs deprecation message
    */
 
-
   function informAboutDeprecation() {
     console.warn(errorMessages$1.deprecation);
   }
 
   function throwError$1(errorMessages, type) {
-    throw new Error(errorMessages[type] || errorMessages["default"]);
+    throw new Error(errorMessages[type] || errorMessages['default']);
   }
 
   var errorMessages$1 = {
     configIsRequired: 'the configuration object is required',
     configType: 'the configuration object should be an object',
-    "default": 'an unknown error accured in `@monaco-editor/loader` package',
-    deprecation: "Deprecation warning!\n    You are using deprecated way of configuration.\n\n    Instead of using\n      monaco.config({ urls: { monacoBase: '...' } })\n    use\n      monaco.config({ paths: { vs: '...' } })\n\n    For more please check the link https://github.com/suren-atoyan/monaco-loader#config\n  "
+    default: 'an unknown error accured in `@monaco-editor/loader` package',
+    deprecation:
+      "Deprecation warning!\n    You are using deprecated way of configuration.\n\n    Instead of using\n      monaco.config({ urls: { monacoBase: '...' } })\n    use\n      monaco.config({ paths: { vs: '...' } })\n\n    For more please check the link https://github.com/suren-atoyan/monaco-loader#config\n  ",
   };
   var errorHandler$1 = curry$1(throwError$1)(errorMessages$1);
   var validators$1 = {
-    config: validateConfig
+    config: validateConfig,
   };
 
   var compose$1 = function compose() {
@@ -436,7 +463,7 @@
   // The source (has been changed) is https://github.com/facebook/react/issues/5465#issuecomment-157888325
   var CANCELATION_MESSAGE = {
     type: 'cancelation',
-    msg: 'operation is manually canceled'
+    msg: 'operation is manually canceled',
   };
 
   function makeCancelable(promise) {
@@ -445,40 +472,42 @@
       promise.then(function (val) {
         return hasCanceled_ ? reject(CANCELATION_MESSAGE) : resolve(val);
       });
-      promise["catch"](reject);
+      promise['catch'](reject);
     });
-    return wrappedPromise.cancel = function () {
-      return hasCanceled_ = true;
-    }, wrappedPromise;
+    return (
+      (wrappedPromise.cancel = function () {
+        return (hasCanceled_ = true);
+      }),
+      wrappedPromise
+    );
   }
 
   /** the local state of the module */
 
   var _state$create = index.create({
-    config: config,
-    isInitialized: false,
-    resolve: null,
-    reject: null,
-    monaco: null
-  }),
-      _state$create2 = _slicedToArray(_state$create, 2),
-      getState = _state$create2[0],
-      setState = _state$create2[1];
+      config: config,
+      isInitialized: false,
+      resolve: null,
+      reject: null,
+      monaco: null,
+    }),
+    _state$create2 = _slicedToArray(_state$create, 2),
+    getState = _state$create2[0],
+    setState = _state$create2[1];
   /**
    * set the loader configuration
    * @param {Object} config - the configuration object
    */
 
-
   function config$1(globalConfig) {
     var _validators$config = validators$1.config(globalConfig),
-        monaco = _validators$config.monaco,
-        config = _objectWithoutProperties(_validators$config, ["monaco"]);
+      monaco = _validators$config.monaco,
+      config = _objectWithoutProperties(_validators$config, ['monaco']);
 
     setState(function (state) {
       return {
         config: merge(state.config, config),
-        monaco: monaco
+        monaco: monaco,
       };
     });
   }
@@ -487,22 +516,21 @@
    * @return {Promise} - returns an instance of monaco (with a cancelable promise)
    */
 
-
   function init() {
     var state = getState(function (_ref) {
       var monaco = _ref.monaco,
-          isInitialized = _ref.isInitialized,
-          resolve = _ref.resolve;
+        isInitialized = _ref.isInitialized,
+        resolve = _ref.resolve;
       return {
         monaco: monaco,
         isInitialized: isInitialized,
-        resolve: resolve
+        resolve: resolve,
       };
     });
 
     if (!state.isInitialized) {
       setState({
-        isInitialized: true
+        isInitialized: true,
       });
 
       if (state.monaco) {
@@ -527,7 +555,6 @@
    * @return {Object} - the injected HTML script element
    */
 
-
   function injectScripts(script) {
     return document.body.appendChild(script);
   }
@@ -537,7 +564,6 @@
    * @return {Object} - the created HTML script element
    */
 
-
   function createScript(src) {
     var script = document.createElement('script');
     return src && (script.src = src), script;
@@ -547,17 +573,16 @@
    * @return {Object} - the created HTML script element
    */
 
-
   function getMonacoLoaderScript(configureLoader) {
     var state = getState(function (_ref2) {
       var config = _ref2.config,
-          reject = _ref2.reject;
+        reject = _ref2.reject;
       return {
         config: config,
-        reject: reject
+        reject: reject,
       };
     });
-    var loaderScript = createScript("".concat(state.config.paths.vs, "/loader.js"));
+    var loaderScript = createScript(''.concat(state.config.paths.vs, '/loader.js'));
 
     loaderScript.onload = function () {
       return configureLoader();
@@ -570,16 +595,15 @@
    * configures the monaco loader
    */
 
-
   function configureLoader() {
     var state = getState(function (_ref3) {
       var config = _ref3.config,
-          resolve = _ref3.resolve,
-          reject = _ref3.reject;
+        resolve = _ref3.resolve,
+        reject = _ref3.reject;
       return {
         config: config,
         resolve: resolve,
-        reject: reject
+        reject: reject,
       };
     });
     var require = window.require;
@@ -597,11 +621,10 @@
    * store monaco instance in local state
    */
 
-
   function storeMonacoInstance(monaco) {
     if (!getState().monaco) {
       setState({
-        monaco: monaco
+        monaco: monaco,
       });
     }
   }
@@ -611,7 +634,6 @@
    * @return {Object|null} - the monaco instance
    */
 
-
   function __getMonacoInstance() {
     return getState(function (_ref4) {
       var monaco = _ref4.monaco;
@@ -622,15 +644,14 @@
   var wrapperPromise = new Promise(function (resolve, reject) {
     return setState({
       resolve: resolve,
-      reject: reject
+      reject: reject,
     });
   });
   var loader = {
     config: config$1,
     init: init,
-    __getMonacoInstance: __getMonacoInstance
+    __getMonacoInstance: __getMonacoInstance,
   };
 
   return loader;
-
-})));
+});
