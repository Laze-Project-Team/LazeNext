関数:実行 () => () {
    マウスキャプチャ();
    シーン:ワールド();
    ベクトル3D:左からの波の色(1.0, 0.5, 0.2);
    ベクトル3D:右からの波の色(0.2, 0.5, 1.0);
    ベクトル3D:合成波の色(1.0, 1.0, 1.0);
    実数:PI = 3.1415926539897932384626;
    配列<整数>:キューブIDリスト;
    整数:回数 = 300;
    ベクトル3D:初期位置(0.0, 0.0, 0.0);
    (回数) 回繰り返す {
        ベクトル3D:色(0.0, 0.0, 0.0);
        実数:大きさ;

        もし ((カウンタ % 3) == 0) ならば {
                // 合成波
                色 = 合成波の色;
                大きさ = 0.15;
            } でなければ {
                大きさ = 0.1;
                もし ((カウンタ % 3) == 1) ならば {
                    // 左からの波
                    色 = 左からの波の色;
                } でなければ {
                    // 右からの波
                    色 = 右からの波の色;
                }
            }

        整数:キューブID = ワールド.キューブ追加(大きさ, 色, 初期位置);
        キューブIDリスト.追加(キューブID);
    }

    無限ループ {
        実数:w = 0.1;
        (キューブIDリスト.長さ())回繰り返す {
            実数:x = w * カウンタ;
            実数:y;
        
            実数:周期 = 0.3;
            実数:波長 = 1.0;
            実数:t = 時間計測() / 1000.0;
            もし ((カウンタ % 3) == 0) ならば {
                // 合成波
                y = sin((t/周期) - (x/波長)) + sin((-t/周期) - (x/波長));
            } でなければ {
                もし ((カウンタ % 3) == 1) ならば {
                    // 左からの波
                    y = sin((t/周期) - (x/波長));
                } でなければ {
                    // 右からの波
                    y = sin((-t/周期) - (x/波長));
                }
            }

            ベクトル3D:位置(x, y, 0.0);
            整数:id = キューブIDリスト.取得(カウンタ);
            ワールド.スプライト配列.取得(id) -> 座標設定(位置);
        }
        ワールド.描画();
    }
}