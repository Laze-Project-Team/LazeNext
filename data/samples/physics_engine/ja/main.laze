クラス: 箱{
公開: 	実数: 幅;
	実数: 高さ;
	実数: 質量;
	実数: 慣性モーメント;
	関数: 箱(実数: w, 実数: h, 実数: m) => (){
		幅 = w;
		高さ = h;
		質量 = m;
		慣性モーメント = m * (w * w + h * h) / 12;
	}
}
クラス: 物体{
公開: 	ベクトル2D: 座標;
	ベクトル2D: 速度;
	実数: 角度;
	実数: 角速度;
	ベクトル2D: 力;
	実数: トルク;
	箱: 形;
	関数: 物体(ベクトル2D: p, ベクトル2D: v, 実数: a, 実数: av, ベクトル2D: f, 実数: t, 箱: b) => (){
		座標 = p;
		速度 = v;
		角度 = a;
		角速度 = av;
		力 = f;
		トルク = t;
		形 = b;
	}
}
クラス: 物理ワールド2D{
公開: 	配列<*物体>: 物体配列;
	関数: 物理ワールド2D(実数: 高さ, 実数: g) => (){
		重力加速度 = g;
		ベクトル3D: 背景色(0.0, 0.0, 0.0);
		ワールド.シーン2D(高さ, 背景色);
		物体配列.配列();
		前回の時間 = 時間計測() / 1000.0;
	}
	関数: 物体追加(実数: w, 実数: h, 実数: m, ベクトル3D: 色, ベクトル2D: initPos, ベクトル2D: initVec, 実数: initAngle, 実数: initAngVec) => (){
		箱: shape(w, h, m);
		ベクトル2D: 重力(0.0, 0 - m * 重力加速度);
		*物体: body = メモリ確保(バイト数(*body));
		body->物体(initPos, initVec, initAngle, initAngVec, 重力, 0, shape);
		物体配列.追加(body);
		整数: id = ワールド.四角形追加(w, h, initPos, 色, 1.0);
	}
	関数: アップデート() => (){
		実数: 経過時間 = 時間計測() / 1000.0 - 前回の時間;
		前回の時間 = 時間計測() / 1000.0;
		(物体配列.長さ())回繰り返す{
			*物体: rigidBody = 物体配列.取得(カウンタ);
			ベクトル2D: 加速度(rigidBody->力.x / rigidBody->形.質量, rigidBody->力.y / rigidBody->形.質量);
			rigidBody->速度.x = rigidBody->速度.x + 加速度.x * 経過時間;
			rigidBody->速度.y = rigidBody->速度.y + 加速度.y * 経過時間;
			rigidBody->座標.x = rigidBody->座標.x + rigidBody->速度.x * 経過時間;
			rigidBody->座標.y = rigidBody->座標.y + rigidBody->速度.y * 経過時間;
			実数: 角加速度 = rigidBody->トルク / rigidBody->形.慣性モーメント;
			rigidBody->角速度 = rigidBody->角速度 + 角加速度 * 経過時間;
			rigidBody->角度 = rigidBody->角度 + rigidBody->角速度 * 経過時間;
			ワールド.スプライト配列.取得(カウンタ)->座標設定(rigidBody->座標);
			ワールド.スプライト配列.取得(カウンタ)->角度設定(rigidBody->角度);
		}
		ワールド.描画();
	}
非公開: 	実数: 重力加速度;
	実数: 前回の時間;
	シーン2D: ワールド;
}
関数: 実行() => (){
	実数: PI = 3.14159265358979312;
	物理ワールド2D: 物理ワールド(1.0, 9.8100000000000005);
	ベクトル3D: 青(0.200000000000000011, 0.5, 0.699999999999999956);
	ベクトル2D: 初期位置(0.0, 1.0);
	ベクトル2D: 初速度(0.0, 0.0);
	物理ワールド.物体追加(0.149999999999999994, 0.149999999999999994, 1.0, 青, 初期位置, 初速度, 0.0, 0.0);
	無限ループ{
		物理ワールド.アップデート();
	}
}
