( x という 実数 ) を とり ${"ja":"実数表示", "natja":"実数表示", "en":"printDouble", "naten":"printDouble"}$ という 関数 を ( "console", "log") から 読み込む 。 
( offset [ 4 ] [ 4 ] という 実数 ) を とり ${"ja":"行列表示", "natja":"行列表示", "en":"printMatrix", "naten":"printMatrix"}$ という 関数 を ( "console", "logMatrix") から 読み込む 。 
( x という * 無 ) を とり ${"ja":"アドレス表示", "natja":"アドレス表示", "en":"printAddress", "naten":"printAddress"}$ という 関数 を ( "console", "log") から 読み込む 。 
( x という * 文字 , 長さ という 整数 ) を とり ${"ja":"_文字列表示", "natja":"_文字列表示", "en":"_printString", "naten":"_printString"}$ という 関数 を ( "console", "logstring") から 読み込む 。 
( 時間 という 実数 ) を 返す ${"ja":"時間計測", "natja":"時間計測", "en":"getTime", "naten":"getTime"}$ という 関数 を ( "performance", "now") から 読み込む 。 
( i という 整数32 ) を とり ${"ja":"glClearDepth", "natja":"glClearDepth", "en":"glClearDepth", "naten":"glClearDepth"}$ という 関数 を ( "webgl", "clearDepth") から 読み込む 。 
( i という 整数32 ) を とり ${"ja":"glDepthFunc", "natja":"glDepthFunc", "en":"glDepthFunc", "naten":"glDepthFunc"}$ という 関数 を ( "webgl", "depthFunc") から 読み込む 。 
( i という 整数32 ) を とり ${"ja":"glEnable", "natja":"glEnable", "en":"glEnable", "naten":"glEnable"}$ という 関数 を ( "webgl", "enable") から 読み込む 。 
( i という 整数32 ) を とり ${"ja":"glDisable", "natja":"glDisable", "en":"glDisable", "naten":"glDisable"}$ という 関数 を ( "webgl", "disable") から 読み込む 。 
( prog という 整数32 ) を 返す ${"ja":"glCreateProgram", "natja":"glCreateProgram", "en":"glCreateProgram", "naten":"glCreateProgram"}$ という 関数 を ( "webgl", "createProgram") から 読み込む 。 
( buffer という 整数32 ) を 返す ${"ja":"glCreateBuffer", "natja":"glCreateBuffer", "en":"glCreateBuffer", "naten":"glCreateBuffer"}$ という 関数 を ( "webgl", "createBuffer") から 読み込む 。 
( i という 整数32 , j という 整数32 ) を とり ${"ja":"glBindBuffer", "natja":"glBindBuffer", "en":"glBindBuffer", "naten":"glBindBuffer"}$ という 関数 を ( "webgl", "bindBuffer") から 読み込む 。 
( i という 整数32 , offset という * 実数 , size という 整数32 , j という 整数32 ) を とり ${"ja":"glBufferData", "natja":"glBufferData", "en":"glBufferData", "naten":"glBufferData"}$ という 関数 を ( "webgl", "bufferData") から 読み込む 。 
( i という 整数32 , offset という * 整数32 , size という 整数32 , j という 整数32 ) を とり ${"ja":"glElementBufferData", "natja":"glElementBufferData", "en":"glElementBufferData", "naten":"glElementBufferData"}$ という 関数 を ( "webgl", "elementBufferData") から 読み込む 。 
( i という 整数32 ) を とり ${"ja":"glUseProgram", "natja":"glUseProgram", "en":"glUseProgram", "naten":"glUseProgram"}$ という 関数 を ( "webgl", "useProgram") から 読み込む 。 
( i という 整数32 , offset という * 文字 , size という 整数32 ) を とり ( loc という 整数32 ) を 返す ${"ja":"glGetAttribLocation", "natja":"glGetAttribLocation", "en":"glGetAttribLocation", "naten":"glGetAttribLocation"}$ という 関数 を ( "webgl", "getAttribLocation") から 読み込む 。 
( index という 整数32 , size という 整数32 , ty という 整数32 , normalized という 整数32 , stride という 整数32 , offset という 整数32 ) を とり ${"ja":"glVertexAttribPointer", "natja":"glVertexAttribPointer", "en":"glVertexAttribPointer", "naten":"glVertexAttribPointer"}$ という 関数 を ( "webgl", "vertexAttribPointer") から 読み込む 。 
( index という 整数32 ) を とり ${"ja":"glEnableVertexAttribArray", "natja":"glEnableVertexAttribArray", "en":"glEnableVertexAttribArray", "naten":"glEnableVertexAttribArray"}$ という 関数 を ( "webgl", "enableVertexAttribArray") から 読み込む 。 
( i という 整数32 , first という 整数32 , count という 整数32 ) を とり ${"ja":"glDrawArrays", "natja":"glDrawArrays", "en":"glDrawArrays", "naten":"glDrawArrays"}$ という 関数 を ( "webgl", "drawArrays") から 読み込む 。 
( i という 整数32 , offset という * 文字 , size という 整数32 ) を とり ( loc という 整数32 ) を 返す ${"ja":"_glGetUniformLocation", "natja":"_glGetUniformLocation", "en":"_glGetUniformLocation", "naten":"_glGetUniformLocation"}$ という 関数 を ( "webgl", "getUniformLocation") から 読み込む 。 
( loc という 整数32 , trans という 整数32 , offset という * 実数 ) を とり ${"ja":"glUniformMatrix2fv", "natja":"glUniformMatrix2fv", "en":"glUniformMatrix2fv", "naten":"glUniformMatrix2fv"}$ という 関数 を ( "webgl", "uniformMatrix2fv") から 読み込む 。 
( loc という 整数32 , trans という 整数32 , offset という * 実数 ) を とり ${"ja":"glUniformMatrix3fv", "natja":"glUniformMatrix3fv", "en":"glUniformMatrix3fv", "naten":"glUniformMatrix3fv"}$ という 関数 を ( "webgl", "uniformMatrix3fv") から 読み込む 。 
( loc という 整数32 , trans という 整数32 , offset [ 16 ] という 実数 ) を とり ${"ja":"glUniformMatrix4fv", "natja":"glUniformMatrix4fv", "en":"glUniformMatrix4fv", "naten":"glUniformMatrix4fv"}$ という 関数 を ( "webgl", "uniformMatrix4fv") から 読み込む 。 
( loc という 整数32 , v0 という 実数 ) を とり ${"ja":"glUniform1f", "natja":"glUniform1f", "en":"glUniform1f", "naten":"glUniform1f"}$ という 関数 を ( "webgl", "uniform1f") から 読み込む 。 
( loc という 整数32 , v0 という 実数 ) を とり ${"ja":"glUniform1fv", "natja":"glUniform1fv", "en":"glUniform1fv", "naten":"glUniform1fv"}$ という 関数 を ( "webgl", "uniform1fv") から 読み込む 。 
( loc という 整数32 , v0 という 整数32 ) を とり ${"ja":"glUniform1i", "natja":"glUniform1i", "en":"glUniform1i", "naten":"glUniform1i"}$ という 関数 を ( "webgl", "uniform1i") から 読み込む 。 
( loc という 整数32 , v0 という 整数32 ) を とり ${"ja":"glUniform1iv", "natja":"glUniform1iv", "en":"glUniform1iv", "naten":"glUniform1iv"}$ という 関数 を ( "webgl", "uniform1iv") から 読み込む 。 
( loc という 整数32 , v0 という 実数 , v1 という 実数 ) を とり ${"ja":"glUniform2f", "natja":"glUniform2f", "en":"glUniform2f", "naten":"glUniform2f"}$ という 関数 を ( "webgl", "uniform2f") から 読み込む 。 
( loc という 整数32 , v0 という 実数 , v1 という 実数 ) を とり ${"ja":"glUniform2fv", "natja":"glUniform2fv", "en":"glUniform2fv", "naten":"glUniform2fv"}$ という 関数 を ( "webgl", "uniform2fv") から 読み込む 。 
( loc という 整数32 , v0 という 整数32 , v1 という 整数32 ) を とり ${"ja":"glUniform2i", "natja":"glUniform2i", "en":"glUniform2i", "naten":"glUniform2i"}$ という 関数 を ( "webgl", "uniform2i") から 読み込む 。 
( loc という 整数32 , v0 という 整数32 , v1 という 整数32 ) を とり ${"ja":"glUniform2iv", "natja":"glUniform2iv", "en":"glUniform2iv", "naten":"glUniform2iv"}$ という 関数 を ( "webgl", "uniform2iv") から 読み込む 。 
( loc という 整数32 , v0 という 実数 , v1 という 実数 , v2 という 実数 ) を とり ${"ja":"glUniform3f", "natja":"glUniform3f", "en":"glUniform3f", "naten":"glUniform3f"}$ という 関数 を ( "webgl", "uniform3f") から 読み込む 。 
( loc という 整数32 , v0 という 実数 , v1 という 実数 , v2 という 実数 ) を とり ${"ja":"glUniform3fv", "natja":"glUniform3fv", "en":"glUniform3fv", "naten":"glUniform3fv"}$ という 関数 を ( "webgl", "uniform3fv") から 読み込む 。 
( loc という 整数32 , v0 という 整数32 , v1 という 整数32 , v2 という 整数32 ) を とり ${"ja":"glUniform3i", "natja":"glUniform3i", "en":"glUniform3i", "naten":"glUniform3i"}$ という 関数 を ( "webgl", "uniform3i") から 読み込む 。 
( loc という 整数32 , v0 という 整数32 , v1 という 整数32 , v2 という 整数32 ) を とり ${"ja":"glUniform3iv", "natja":"glUniform3iv", "en":"glUniform3iv", "naten":"glUniform3iv"}$ という 関数 を ( "webgl", "uniform3iv") から 読み込む 。 
( loc という 整数32 , v0 という 実数 , v1 という 実数 , v2 という 実数 , v3 という 実数 ) を とり ${"ja":"glUniform4f", "natja":"glUniform4f", "en":"glUniform4f", "naten":"glUniform4f"}$ という 関数 を ( "webgl", "uniform4f") から 読み込む 。 
( loc という 整数32 , v0 という 実数 , v1 という 実数 , v2 という 実数 , v3 という 実数 ) を とり ${"ja":"glUniform4fv", "natja":"glUniform4fv", "en":"glUniform4fv", "naten":"glUniform4fv"}$ という 関数 を ( "webgl", "uniform4fv") から 読み込む 。 
( loc という 整数32 , v0 という 整数32 , v1 という 整数32 , v2 という 整数32 , v3 という 整数32 ) を とり ${"ja":"glUniform4i", "natja":"glUniform4i", "en":"glUniform4i", "naten":"glUniform4i"}$ という 関数 を ( "webgl", "uniform4i") から 読み込む 。 
( loc という 整数32 , v0 という 整数32 , v1 という 整数32 , v2 という 整数32 , v3 という 整数32 ) を とり ${"ja":"glUniform4iv", "natja":"glUniform4iv", "en":"glUniform4iv", "naten":"glUniform4iv"}$ という 関数 を ( "webgl", "uniform4iv") から 読み込む 。 
( r という 実数 , g という 実数 , b という 実数 , a という 実数 ) を とり ${"ja":"glClearColor", "natja":"glClearColor", "en":"glClearColor", "naten":"glClearColor"}$ という 関数 を ( "webgl", "clearColor") から 読み込む 。 
( color という 整数32 ) を とり ${"ja":"glClear", "natja":"glClear", "en":"glClear", "naten":"glClear"}$ という 関数 を ( "webgl", "clear") から 読み込む 。 
( i という 整数32 , count という 整数32 , ty という 整数32 , offset という 整数32 ) を とり ${"ja":"glDrawElements", "natja":"glDrawElements", "en":"glDrawElements", "naten":"glDrawElements"}$ という 関数 を ( "webgl", "drawElements") から 読み込む 。 
( i という 整数32 , j という 整数32 ) を とり ${"ja":"glBlendFunc", "natja":"glBlendFunc", "en":"glBlendFunc", "naten":"glBlendFunc"}$ という 関数 を ( "webgl", "blendFunc") から 読み込む 。 
( keyCode という 整数32 ) を とり ( pressed という 整数 ) を 返す ${"ja":"キーチェック", "natja":"キーチェック", "en":"checkKeyPress", "naten":"checkKeyPress"}$ という 関数 を ( "js", "checkKeyPress") から 読み込む 。 
( pressed という 整数 ) を 返す ${"ja":"マウスチェック", "natja":"マウスチェック", "en":"checkMousePress", "naten":"checkMousePress"}$ という 関数 を ( "js", "checkMousePress") から 読み込む 。 
( x という 実数 ) を 返す ${"ja":"マウス相対座標X", "natja":"マウス相対座標X", "en":"checkRelativeMouseX", "naten":"checkRelativeMouseX"}$ という 関数 を ( "js", "checkRelativeMouseX") から 読み込む 。 
( x という 実数 ) を 返す ${"ja":"マウス相対座標Y", "natja":"マウス相対座標Y", "en":"checkRelativeMouseY", "naten":"checkRelativeMouseY"}$ という 関数 を ( "js", "checkRelativeMouseY") から 読み込む 。 
( x という 実数 ) を 返す ${"ja":"マウス絶対座標X", "natja":"マウス絶対座標X", "en":"checkAbsoluteMouseX", "naten":"checkAbsoluteMouseX"}$ という 関数 を ( "js", "checkAbsoluteMouseX") から 読み込む 。 
( x という 実数 ) を 返す ${"ja":"マウス絶対座標Y", "natja":"マウス絶対座標Y", "en":"checkAbsoluteMouseY", "naten":"checkAbsoluteMouseY"}$ という 関数 を ( "js", "checkAbsoluteMouseY") から 読み込む 。 
( x という 実数 ) を 返す ${"ja":"ランダム数生成", "natja":"ランダム数生成", "en":"rand", "naten":"rand"}$ という 関数 を ( "js", "rand") から 読み込む 。 
( size という 整数32 ) を とり ( p という * 無 ) を 返す ${"ja":"メモリ確保", "natja":"メモリ確保", "en":"allocMemory", "naten":"allocMemory"}$ という 関数 を ( "js", "alloc") から 読み込む 。 
( offset という * 文字 , length という 整数32 ) を とり ( a という 整数32 ) を 返す ${"ja":"テクスチャロード", "natja":"テクスチャロード", "en":"_loadTexture", "naten":"_loadTexture"}$ という 関数 を ( "webgl", "loadTexture") から 読み込む 。 
( i という 整数32 ) を とり ${"ja":"glActiveTexture", "natja":"glActiveTexture", "en":"glActiveTexture", "naten":"glActiveTexture"}$ という 関数 を ( "webgl", "activeTexture") から 読み込む 。 
( i という 整数32 , j という 整数32 ) を とり ${"ja":"glBindTexture", "natja":"glBindTexture", "en":"glBindTexture", "naten":"glBindTexture"}$ という 関数 を ( "webgl", "bindTexture") から 読み込む 。 
関数 ${"ja":"マウスキャプチャ", "natja":"マウスキャプチャ", "en":"captureMouse", "naten":"captureMouse"}$ を ( "js", "lockPointer") から 読み込む 。 
( vendorId という 整数 , c という 関数 : ( ) => ( ) ) を とり ${"ja":"Arduino設定", "natja":"Arduino設定", "en":"ArduinoSetup", "naten":"ArduinoSetup"}$ という 関数 を ( "arduino", "setUp") から 読み込む 。 
( コマンド という 文字 , data という 整数32 ) を とり ${"ja":"Arduinoコマンド送信", "natja":"Arduinoコマンド送信", "en":"ArduinoSendCommand", "naten":"ArduinoSendCommand"}$ という 関数 を ( "arduino", "sendCommand") から 読み込む 。 
関数 ${"ja":"Arduinoデータ受信", "natja":"Arduinoデータ受信", "en":"ArduinoReceiveData", "naten":"ArduinoReceiveData"}$ を ( "arduino", "checkInput") から 読み込む 。 
( ピン番号 という 整数 ) を とり ( データ という 整数32 ) を 返す ${"ja":"Arduinoアナログ入力", "natja":"Arduinoアナログ入力", "en":"ArduinoAnalogInput", "naten":"ArduinoAnalogInput"}$ という 関数 を ( "arduino", "analogRead") から 読み込む 。 
( ピン番号 という 整数 ) を とり ( データ という 整数32 ) を 返す ${"ja":"Arduinoデジタル入力", "natja":"Arduinoデジタル入力", "en":"ArduinoDigitalInput", "naten":"ArduinoDigitalInput"}$ という 関数 を ( "arduino", "digitalRead") から 読み込む 。 
( ピン番号 という 整数 ) を とり ( データ という 整数32 ) を 返す ${"ja":"ArduinoHCSR04距離入力", "natja":"ArduinoHCSR04距離入力", "en":"ArduinoHCSR04DistanceInput", "naten":"ArduinoHCSR04DistanceInput"}$ という 関数 を ( "arduino", "distanceRead") から 読み込む 。 
( input という 実数 ) を とり ( 結果 という 実数 ) を 返す ${"ja":"sin", "natja":"sin", "en":"sin", "naten":"sin"}$ という 関数 を おく 。 ここから
	PI という 実数 を 3.14159265358979312 で 初期化 。 
	temp という 整数 を input  / ( 2.0  * PI ) で 初期化 。 
	rad という 実数 を input  - ( 2.0  * PI  * temp ) で 初期化 。 
	plusminus という 実数 を 1.0 で 初期化 。 
	もし rad  < 0.0 ならば ここから
		rad に rad  + ( 2.0  * PI ) を 代入する 。 
	ここまで実行 
	もし rad  > PI ならば ここから
		plusminus に 0  - 1.0 を 代入する 。 
		もし rad  > 1.5  * PI ならば ここから
			rad に ( 2.0  * PI )  - rad を 代入する 。 
		ここまで実行 でなければ ここから
			rad に rad  - PI を 代入する 。 
		ここまで実行 
	ここまで実行 でなければ ここから
		もし rad  > 0.5  * PI ならば ここから
			rad に PI  - rad を 代入する 。 
		ここまで実行 
	ここまで実行 
	もし rad  > 0.25  * PI ならば ここから
		rad に ( 0.5  * PI )  - rad を 代入する 。 
		doubleRad という 実数 を rad  * rad で 初期化 。 
		結果 に 1.0  - ( doubleRad )  / 2.0  + ( doubleRad  * doubleRad )  / 24.0  - ( doubleRad  * doubleRad  * doubleRad )  / 720.0  + ( doubleRad  * doubleRad  * doubleRad  * doubleRad )  / 40320.0  - ( doubleRad  * doubleRad  * doubleRad  * doubleRad  * doubleRad )  / 3628800.0  + ( doubleRad  * doubleRad  * doubleRad  * doubleRad  * doubleRad  * doubleRad )  / 479001600.0 を 代入する 。 
		結果 に 結果  * plusminus を 代入する 。 
	ここまで実行 でなければ ここから
		doubleRad という 実数 を rad  * rad で 初期化 。 
		結果 に rad  - ( rad  * doubleRad )  / 6.0  + ( rad  * doubleRad  * doubleRad )  / 120.0  - ( rad  * doubleRad  * doubleRad  * doubleRad )  / 5040.0  + ( rad  * doubleRad  * doubleRad  * doubleRad  * doubleRad )  / 362880.0  - ( rad  * doubleRad  * doubleRad  * doubleRad  * doubleRad  * doubleRad )  / 39916800.0  + ( rad  * doubleRad  * doubleRad  * doubleRad  * doubleRad  * doubleRad  * doubleRad )  / 6227020800.0  - ( rad  * doubleRad  * doubleRad  * doubleRad  * doubleRad  * doubleRad  * doubleRad  * doubleRad )  / 1307674368000.0 を 代入する 。 
		結果 に 結果  * plusminus を 代入する 。 
	ここまで実行 
ここまで実行 
( input という 実数 ) を とり ( 結果 という 実数 ) を 返す ${"ja":"cos", "natja":"cos", "en":"cos", "naten":"cos"}$ という 関数 を おく 。 ここから
	PI という 実数 を 3.14159265358979312 で 初期化 。 
	temp という 整数 を input  / ( 2  * PI ) で 初期化 。 
	rad という 実数 を input  - ( 2  * PI  * temp ) で 初期化 。 
	plusminus という 実数 を 1.0 で 初期化 。 
	もし rad  < 0.0 ならば ここから
		rad に rad  + ( 2.0  * PI ) を 代入する 。 
	ここまで実行 
	もし rad  > PI ならば ここから
		もし rad  > 1.5  * PI ならば ここから
			rad に ( 2.0  * PI )  - rad を 代入する 。 
		ここまで実行 でなければ ここから
			plusminus に 0  - 1.0 を 代入する 。 
			rad に rad  - PI を 代入する 。 
		ここまで実行 
	ここまで実行 でなければ ここから
		もし rad  > 0.5  * PI ならば ここから
			plusminus に 0  - 1.0 を 代入する 。 
			rad に PI  - rad を 代入する 。 
		ここまで実行 
	ここまで実行 
	もし rad  < 0.25  * PI ならば ここから
		doubleRad という 実数 を rad  * rad で 初期化 。 
		結果 に 1.0  - ( doubleRad )  / 2.0  + ( doubleRad  * doubleRad )  / 24.0  - ( doubleRad  * doubleRad  * doubleRad )  / 720.0  + ( doubleRad  * doubleRad  * doubleRad  * doubleRad )  / 40320.0  - ( doubleRad  * doubleRad  * doubleRad  * doubleRad  * doubleRad )  / 3628800.0  + ( doubleRad  * doubleRad  * doubleRad  * doubleRad  * doubleRad  * doubleRad )  / 479001600.0 を 代入する 。 
		結果 に 結果  * plusminus を 代入する 。 
	ここまで実行 でなければ ここから
		rad に ( 0.5  * PI )  - rad を 代入する 。 
		doubleRad という 実数 を rad  * rad で 初期化 。 
		結果 に rad  - ( rad  * doubleRad )  / 6.0  + ( rad  * doubleRad  * doubleRad )  / 120.0  - ( rad  * doubleRad  * doubleRad  * doubleRad )  / 5040.0  + ( rad  * doubleRad  * doubleRad  * doubleRad  * doubleRad )  / 362880.0  - ( rad  * doubleRad  * doubleRad  * doubleRad  * doubleRad  * doubleRad )  / 39916800.0  + ( rad  * doubleRad  * doubleRad  * doubleRad  * doubleRad  * doubleRad  * doubleRad )  / 6227020800.0  - ( rad  * doubleRad  * doubleRad  * doubleRad  * doubleRad  * doubleRad  * doubleRad  * doubleRad )  / 1307674368000.0 を 代入する 。 
		結果 に 結果  * plusminus を 代入する 。 
	ここまで実行 
ここまで実行 
( rad という 実数 ) を とり ( 結果 という 実数 ) を 返す ${"ja":"tan", "natja":"tan", "en":"tan", "naten":"tan"}$ という 関数 を おく 。 ここから
	PI という 実数 を 3.14159265358979312 で 初期化 。 
	sqRad という 実数 を rad  * rad で 初期化 。 
	結果 に sin ( rad )  / cos ( rad ) を 代入する 。 
ここまで実行 
( a という 実数 ) を とり ( b という 実数 ) を 返す ${"ja":"絶対値", "natja":"絶対値", "en":"abs", "naten":"abs"}$ という 関数 を おく 。 ここから
	もし a  >= 0 ならば ここから
		b に a を 代入する 。 
	ここまで実行 でなければ ここから
		b に 0  - a を 代入する 。 
	ここまで実行 
ここまで実行 
( deg という 実数 ) を とり ( rad という 実数 ) を 返す ${"ja":"ラジアンへ", "natja":"ラジアンへ", "en":"toRad", "naten":"toRad"}$ という 関数 を おく 。 ここから
	PI という 実数 を 3.14159265358979312 で 初期化 。 
	rad に ( deg  / 180 )  * PI を 代入する 。 
ここまで実行 
( x という 実数 ) を とり ( y という 実数 ) を 返す ${"ja":"平方根", "natja":"平方根", "en":"root", "naten":"root"}$ という 関数 を おく 。 ここから
	y に 5 を 代入する 。 
	( i という 整数 を 0 で 初期化 。 ) から ( i  は 20 ) まで ( i に i  + 1 を 代入する 。 ) 繰り返し ここから
		y に 0.5  * ( y  + ( x  / y ) ) を 代入する 。 
	ここまで実行 
ここまで実行 
型 < T > : クラス : ${"ja":"配列", "natja":"配列", "en":"Array", "naten":"Array"}$ {
公開 : 	content という * T を おく 。 
	size という 整数 を おく 。 
	allocated という 整数 を おく 。 
	関数 配列 を おく 。 ここから
		size に 0 を 代入する 。 
		allocated に 4 を 代入する 。 
		content に メモリ確保 ( バイト数 ( content に ある オブジェクト )  * allocated ) を 代入する 。 
	ここまで実行 
	( index という 整数 ) を とり ( result という T ) を 返す ${"ja":"取得", "natja":"取得", "en":"get", "naten":"get"}$ という 関数 を おく 。 ここから
		content [ index ] を 終了 。 
	ここまで実行 
	( new という T ) を とり ${"ja":"追加", "natja":"追加", "en":"push", "naten":"push"}$ という 関数 を おく 。 ここから
		もし size  は allocated ならば ここから
			allocated に allocated  * 2 を 代入する 。 
			temp という * T を content で 初期化 。 
			content に メモリ確保 ( バイト数 ( content に ある オブジェクト )  * allocated ) を 代入する 。 
			( i という 整数 を 0 で 初期化 。 ) から ( i  は ( allocated  - 1 ) ) まで ( i に i  + 1 を 代入する 。 ) 繰り返し ここから
				content [ i ] に temp [ i ] を 代入する 。 
			ここまで実行 
		ここまで実行 
		content [ size ] に new を 代入する 。 
		size に size  + 1 を 代入する 。 
	ここまで実行 
	( a という 整数 ) を 返す ${"ja":"長さ", "natja":"長さ", "en":"length", "naten":"length"}$ という 関数 を おく 。 ここから
		a に size を 代入する 。 
	ここまで実行 
	関数 ${"ja":"ポップ", "natja":"ポップ", "en":"pop", "naten":"pop"}$ を おく 。 ここから
		size に size  - 1 を 代入する 。 
	ここまで実行 
	関数 : 演算子 = ( offset という * T , l という 整数 ) => ( ) ここから
		content に offset を 代入する 。 
		size に l を 代入する 。 
	ここまで実行 
	関数 : 演算子 = ( a という 配列 < T > ) => ( ) ここから
		content に メモリ確保 ( バイト数 ( content に ある オブジェクト )  * ( a の allocated ) ) を 代入する 。 
		size に a の size を 代入する 。 
		allocated に a の allocated を 代入する 。 
		size 回繰り返す ここから
			content [ カウンタ ] に a の content [ カウンタ ] を 代入する 。 
		ここまで実行 
	ここまで実行 
	関数 : 演算子  は ( a という 配列 < T > ) => ( b という 真偽 ) ここから
		b に 真 を 代入する 。 
		もし size  != a の size ならば ここから
			偽 を 終了 。 
		ここまで実行 
		size 回繰り返す ここから
			もし content [ カウンタ ]  != a の content [ カウンタ ] ならば ここから
				偽 を 終了 。 
			ここまで実行 
		ここまで実行 
	ここまで実行 
	関数 : 演算子  は ( offset という * T , l という 整数 ) => ( b という 真偽 ) ここから
		b に 真 を 代入する 。 
		もし size  != l ならば ここから
			偽 を 終了 。 
		ここまで実行 
		size 回繰り返す ここから
			もし content [ カウンタ ]  != offset [ カウンタ ] ならば ここから
				偽 を 終了 。 
			ここまで実行 
		ここまで実行 
	ここまで実行 
	関数 : 演算子  != ( a という 配列 < T > ) => ( b という 真偽 ) ここから
		b に 偽 を 代入する 。 
		もし size  != a の size ならば ここから
			真 を 終了 。 
		ここまで実行 
		size 回繰り返す ここから
			もし content [ カウンタ ]  != a の content [ カウンタ ] ならば ここから
				真 を 終了 。 
			ここまで実行 
		ここまで実行 
	ここまで実行 
	関数 : 演算子  != ( offset という * T , l という 整数 ) => ( b という 真偽 ) ここから
		b に 偽 を 代入する 。 
		もし size  != l ならば ここから
			真 を 終了 。 
		ここまで実行 
		size 回繰り返す ここから
			もし content [ カウンタ ]  != offset [ カウンタ ] ならば ここから
				真 を 終了 。 
			ここまで実行 
		ここまで実行 
	ここまで実行 
	関数 : 演算子  + ( a という 配列 < T > ) => ( b という 配列 < T > ) ここから
		結果 という 配列 < T > を おく 。 
		size 回繰り返す ここから
			content [ カウンタ ] 結果 の 追加 する 。 
		ここまで実行 
		a の size 回繰り返す ここから
			a の 取得 ( カウンタ ) 結果 の 追加 する 。 
		ここまで実行 
		結果 を 終了 。 
	ここまで実行 
	関数 : 演算子  + ( offset という * T , l という 整数 ) => ( b という 配列 < T > ) ここから
		結果 という 配列 < T > を おく 。 
		size 回繰り返す ここから
			content [ カウンタ ] 結果 の 追加 する 。 
		ここまで実行 
		l 回繰り返す ここから
			offset [ カウンタ ] 結果 の 追加 する 。 
		ここまで実行 
		結果 を 終了 。 
	ここまで実行 
	( c という 関数 : ( a という T ) => ( ) ) を とり ${"ja":"全要素操作", "natja":"全要素操作", "en":"forEach", "naten":"forEach"}$ という 関数 を おく 。 ここから
		size 回繰り返す ここから
			content [ カウンタ ] c する 。 
		ここまで実行 
	ここまで実行 
	( c という 関数 : ( a という T ) => ( b という T ) ) を とり ${"ja":"全要素変更", "natja":"全要素変更", "en":"map", "naten":"map"}$ という 関数 を おく 。 ここから
		結果 という 配列 < T > を おく 。 
		結果 の content に メモリ確保 ( バイト数 ( content に ある オブジェクト )  * ( allocated ) ) を 代入する 。 
		結果 の size に size を 代入する 。 
		結果 の allocated に allocated を 代入する 。 
		size 回繰り返す ここから
			結果 の content [ カウンタ ] に c ( content [ カウンタ ] ) を 代入する 。 
		ここまで実行 
		結果 を 終了 。 
	ここまで実行 
	( s という 整数 , e という 整数 , c という 関数 : ( a という T , b という T ) => ( r という 整数 ) ) を とり __ソート という 関数 を おく 。 ここから
		もし s  < e ならば ここから
			loc という 整数 を e で 初期化 。 
			pivot という T を content [ loc ] で 初期化 。 
			i という 整数 を s  - 1 で 初期化 。 
			l という 整数 を e  - s で 初期化 。 
			l 回繰り返す ここから
				もし c ( content [ カウンタ  + s ] , pivot )  < 0 ならば ここから
					i に i  + 1 を 代入する 。 
					temp という T を content [ カウンタ  + s ] で 初期化 。 
					content [ カウンタ  + s ] に content [ i ] を 代入する 。 
					content [ i ] に temp を 代入する 。 
				ここまで実行 
			ここまで実行 
			temp という T を content [ loc ] で 初期化 。 
			content [ loc ] に content [ i  + 1 ] を 代入する 。 
			content [ i  + 1 ] に temp を 代入する 。 
			s , i , c __ソート する 。 
			i  + 2 , e , c __ソート する 。 
		ここまで実行 
	ここまで実行 
	( c という 関数 : ( a という T , b という T ) => ( r という 整数 ) ) を とり ${"ja":"ソート", "natja":"ソート", "en":"sort", "naten":"sort"}$ という 関数 を おく 。 ここから
		0 , size  - 1 , c __ソート する 。 
	ここまで実行 
	( c という 関数 : ( a という T ) => ( r という 真偽 ) ) を とり ( b という 配列 < T > ) を 返す ${"ja":"フィルター", "natja":"フィルター", "en":"filter", "naten":"filter"}$ という 関数 を おく 。 ここから
		結果 という 配列 < T > を おく 。 
		size 回繰り返す ここから
			もし c ( content [ カウンタ ] ) ならば ここから
				content [ カウンタ ] 結果 の 追加 する 。 
			ここまで実行 
		ここまで実行 
		結果 を 終了 。 
	ここまで実行 
	( i という 整数 ) を とり ( b という 配列 < T > ) を 返す ${"ja":"削除", "natja":"削除", "en":"remove", "naten":"remove"}$ という 関数 を おく 。 ここから
		結果 という 配列 < T > を おく 。 
		size 回繰り返す ここから
			もし カウンタ  != i ならば ここから
				content [ カウンタ ] 結果 の 追加 する 。 
			ここまで実行 
		ここまで実行 
		結果 を 終了 。 
	ここまで実行 
	( i という 整数 , r という 整数 ) を とり ( b という 配列 < T > ) を 返す ${"ja":"範囲削除", "natja":"範囲削除", "en":"removeRange", "naten":"removeRange"}$ という 関数 を おく 。 ここから
		結果 という 配列 < T > を おく 。 
		size 回繰り返す ここから
			もし ( カウンタ  < i )  || ( カウンタ  >= ( i  + r ) ) ならば ここから
				content [ カウンタ ] 結果 の 追加 する 。 
			ここまで実行 
		ここまで実行 
		結果 を 終了 。 
	ここまで実行 
	( s という 整数 , e という 整数 ) を とり ( b という 配列 < T > ) を 返す ${"ja":"部分列", "natja":"部分列", "en":"subseq", "naten":"subseq"}$ という 関数 を おく 。 ここから
		結果 という 配列 < T > を おく 。 
		もし s  >= e ならば ここから
			結果 を 終了 。 
		ここまで実行 
		size 回繰り返す ここから
			もし ( s  <= カウンタ )  && ( カウンタ  < e ) ならば ここから
				content [ カウンタ ] 結果 の 追加 する 。 
			ここまで実行 
		ここまで実行 
		結果 を 終了 。 
	ここまで実行 
	( s という 整数 , l という 整数 ) を とり ( b という 配列 < T > ) を 返す ${"ja":"範囲部分列", "natja":"範囲部分列", "en":"subseqRange", "naten":"subseqRange"}$ という 関数 を おく 。 ここから
		結果 という 配列 < T > を おく 。 
		もし s  >= size ならば ここから
			結果 を 終了 。 
		ここまで実行 
		size 回繰り返す ここから
			もし ( s  <= カウンタ )  && ( カウンタ  < ( s  + l ) ) ならば ここから
				content [ カウンタ ] 結果 の 追加 する 。 
			ここまで実行 
		ここまで実行 
		結果 を 終了 。 
	ここまで実行 
	( a という T , b という T ) を とり ${"ja":"置換", "natja":"置換", "en":"replace", "naten":"replace"}$ という 関数 を おく 。 ここから
		size 回繰り返す ここから
			もし content [ カウンタ ]  は a ならば ここから
				content [ カウンタ ] に b を 代入する 。 
			ここまで実行 
		ここまで実行 
	ここまで実行 
	( s という 整数 , l という 整数 , a という T ) を とり ${"ja":"範囲置換", "natja":"範囲置換", "en":"replaceRange", "naten":"replaceRange"}$ という 関数 を おく 。 ここから
		size 回繰り返す ここから
			もし ( s  <= カウンタ )  && ( カウンタ  < ( s  + l ) ) ならば ここから
				content [ カウンタ ] に a を 代入する 。 
			ここまで実行 
		ここまで実行 
	ここまで実行 
	( s という 整数 , l という 整数 , a という 配列 < T > ) を とり ${"ja":"範囲置換", "natja":"範囲置換", "en":"replaceRange", "naten":"replaceRange"}$ という 関数 を おく 。 ここから
		size 回繰り返す ここから
			もし ( s  <= カウンタ )  && ( カウンタ  < ( s  + l ) ) ならば ここから
				content [ カウンタ ] に a の content [ カウンタ  - s ] を 代入する 。 
			ここまで実行 
		ここまで実行 
	ここまで実行 
	( b という T ) を とり ( i という 整数 ) を 返す ${"ja":"探索", "natja":"探索", "en":"find", "naten":"find"}$ という 関数 を おく 。 ここから
		size 回繰り返す ここから
			もし content [ カウンタ ]  は b ならば ここから
				カウンタ を 終了 。 
			ここまで実行 
		ここまで実行 
		size を 終了 。 
	ここまで実行 
} 
クラス : ${"ja":"文字列", "natja":"文字列", "en":"string", "naten":"string"}$ {
公開 : 	content という * 文字 を おく 。 
	長さ という 整数 を おく 。 
	( offset という * 文字 , l という 整数 ) を とり 文字列 という 関数 を おく 。 ここから
		content に offset を 代入する 。 
		長さ に l を 代入する 。 
	ここまで実行 
	関数 文字列 を おく 。 ここから
		content に メモリ確保 ( 0 ) を 代入する 。 
		長さ に 0 を 代入する 。 
	ここまで実行 
	関数 : 演算子 = ( offset という * 文字 , l という 整数 ) => ( ) ここから
		content に offset を 代入する 。 
		長さ に l を 代入する 。 
	ここまで実行 
	関数 : 演算子 = ( a という 文字列 ) => ( ) ここから
		content に メモリ確保 ( バイト数 ( content に ある オブジェクト )  * ( a の 長さ ) ) を 代入する 。 
		長さ に a の 長さ を 代入する 。 
		長さ 回繰り返す ここから
			content [ カウンタ ] に a の content [ カウンタ ] を 代入する 。 
		ここまで実行 
	ここまで実行 
	関数 : 演算子  + ( a という 文字 ) => ( b という 文字列 ) ここから
		b の content に メモリ確保 ( バイト数 ( content に ある オブジェクト )  * ( 長さ  + 1 ) ) を 代入する 。 
		長さ 回繰り返す ここから
			b の content [ カウンタ ] に content [ カウンタ ] を 代入する 。 
		ここまで実行 
		b の content [ 長さ ] に a を 代入する 。 
		b の 長さ に 長さ  + 1 を 代入する 。 
	ここまで実行 
	関数 : 演算子  + ( offset という * 文字 , l という 整数 ) => ( b という 文字列 ) ここから
		b の content に メモリ確保 ( バイト数 ( content に ある オブジェクト )  * ( 長さ  + l ) ) を 代入する 。 
		長さ 回繰り返す ここから
			b の content [ カウンタ ] に content [ カウンタ ] を 代入する 。 
		ここまで実行 
		l 回繰り返す ここから
			b の content [ 長さ  + カウンタ ] に offset [ カウンタ ] を 代入する 。 
		ここまで実行 
		b の 長さ に 長さ  + l を 代入する 。 
	ここまで実行 
	関数 : 演算子  + ( a という 文字列 ) => ( b という 文字列 ) ここから
		b の content に メモリ確保 ( バイト数 ( content に ある オブジェクト )  * ( 長さ  + a の 長さ ) ) を 代入する 。 
		長さ 回繰り返す ここから
			b の content [ カウンタ ] に content [ カウンタ ] を 代入する 。 
		ここまで実行 
		a の 長さ 回繰り返す ここから
			b の content [ 長さ  + カウンタ ] に a の content [ カウンタ ] を 代入する 。 
		ここまで実行 
		b の 長さ に 長さ  + a の 長さ を 代入する 。 
	ここまで実行 
	関数 : 演算子  は ( a という 文字列 ) => ( b という 真偽 ) ここから
		b に 真 を 代入する 。 
		もし 長さ  != a の 長さ ならば ここから
			偽 を 終了 。 
		ここまで実行 
		長さ 回繰り返す ここから
			もし content [ カウンタ ]  != a の content [ カウンタ ] ならば ここから
				偽 を 終了 。 
			ここまで実行 
		ここまで実行 
	ここまで実行 
	関数 : 演算子  は ( offset という * 文字 , l という 整数 ) => ( b という 真偽 ) ここから
		b に 真 を 代入する 。 
		もし 長さ  != l ならば ここから
			偽 を 終了 。 
		ここまで実行 
		長さ 回繰り返す ここから
			もし content [ カウンタ ]  != offset [ カウンタ ] ならば ここから
				偽 を 終了 。 
			ここまで実行 
		ここまで実行 
	ここまで実行 
	関数 : 演算子  != ( a という 文字列 ) => ( b という 真偽 ) ここから
		b に 偽 を 代入する 。 
		もし 長さ  != a の 長さ ならば ここから
			真 を 終了 。 
		ここまで実行 
		長さ 回繰り返す ここから
			もし content [ カウンタ ]  != a の content [ カウンタ ] ならば ここから
				真 を 終了 。 
			ここまで実行 
		ここまで実行 
	ここまで実行 
	関数 : 演算子  != ( offset という * 文字 , l という 整数 ) => ( b という 真偽 ) ここから
		b に 偽 を 代入する 。 
		もし 長さ  != l ならば ここから
			真 を 終了 。 
		ここまで実行 
		長さ 回繰り返す ここから
			もし content [ カウンタ ]  != offset [ カウンタ ] ならば ここから
				真 を 終了 。 
			ここまで実行 
		ここまで実行 
	ここまで実行 
	( s という 整数 , e という 整数 ) を とり ( b という 文字列 ) を 返す ${"ja":"切り取り", "natja":"切り取り", "en":"substr", "naten":"substr"}$ という 関数 を おく 。 ここから
		もし s  > 長さ ならば ここから
			s に 長さ を 代入する 。 
		ここまで実行 
		もし e  > 長さ ならば ここから
			e に 長さ を 代入する 。 
		ここまで実行 
		b の content に メモリ確保 ( バイト数 ( content に ある オブジェクト )  * ( e  - s ) ) を 代入する 。 
		b の 長さ に e  - s を 代入する 。 
		( i という 整数 を s で 初期化 。 ) から ( i  は e ) まで ( i に i  + 1 を 代入する 。 ) 繰り返し ここから
			b の content [ i  - s ] に content [ i ] を 代入する 。 
		ここまで実行 
	ここまで実行 
	( s という 整数 , l という 整数 ) を とり ( b という 文字列 ) を 返す ${"ja":"範囲切り取り", "natja":"範囲切り取り", "en":"substrRange", "naten":"substrRange"}$ という 関数 を おく 。 ここから
		もし s  > 長さ ならば ここから
			s に 長さ を 代入する 。 
		ここまで実行 
		もし s  + l  > 長さ ならば ここから
			l に 長さ  - s を 代入する 。 
		ここまで実行 
		b の content に メモリ確保 ( バイト数 ( content に ある オブジェクト )  * l ) を 代入する 。 
		b の 長さ に l を 代入する 。 
		( i という 整数 を s で 初期化 。 ) から ( i  は ( s  + l ) ) まで ( i に i  + 1 を 代入する 。 ) 繰り返し ここから
			b の content [ i  - s ] に content [ i ] を 代入する 。 
		ここまで実行 
	ここまで実行 
	( a という 文字 ) を とり ( b という 配列 < 文字列 > ) を 返す ${"ja":"分割", "natja":"分割", "en":"separate", "naten":"separate"}$ という 関数 を おく 。 ここから
		結果 という 配列 < 文字列 > を おく 。 
		開始 という 整数 を 0 で 初期化 。 
		長さ 回繰り返す ここから
			もし content [ カウンタ ]  は a ならば ここから
				切り取り ( 開始 , カウンタ ) 結果 の 追加 する 。 
				開始 に カウンタ  + 1 を 代入する 。 
			ここまで実行 
		ここまで実行 
		切り取り ( 開始 , 長さ ) 結果 の 追加 する 。 
		結果 を 終了 。 
	ここまで実行 
	( a という 整数 ) を 返す ${"ja":"整数変換", "natja":"整数変換", "en":"toInteger", "naten":"toInteger"}$ という 関数 を おく 。 ここから
		a に 0 を 代入する 。 
		長さ 回繰り返す ここから
			c という 文字 を content [ カウンタ ] で 初期化 。 
			もし c  != '-'ならば ここから
				a に a  * 10 を 代入する 。 
			ここまで実行 
			もし c  は '1'ならば ここから
				a に a  + 1 を 代入する 。 
			ここまで実行 
			もし c  は '2'ならば ここから
				a に a  + 2 を 代入する 。 
			ここまで実行 
			もし c  は '3'ならば ここから
				a に a  + 3 を 代入する 。 
			ここまで実行 
			もし c  は '4'ならば ここから
				a に a  + 4 を 代入する 。 
			ここまで実行 
			もし c  は '5'ならば ここから
				a に a  + 5 を 代入する 。 
			ここまで実行 
			もし c  は '6'ならば ここから
				a に a  + 6 を 代入する 。 
			ここまで実行 
			もし c  は '7'ならば ここから
				a に a  + 7 を 代入する 。 
			ここまで実行 
			もし c  は '8'ならば ここから
				a に a  + 8 を 代入する 。 
			ここまで実行 
			もし c  は '9'ならば ここから
				a に a  + 9 を 代入する 。 
			ここまで実行 
		ここまで実行 
		もし content [ 0 ]  は '-'ならば ここから
			a に a  * 0  - 1.0 を 代入する 。 
		ここまで実行 
	ここまで実行 
	( a という 実数 ) を 返す ${"ja":"実数変換", "natja":"実数変換", "en":"toDouble", "naten":"toDouble"}$ という 関数 を おく 。 ここから
		a に 0 を 代入する 。 
		b という 配列 < 文字列 > を 分割 ( '.') で 初期化 。 
		もし b の 長さ ( )  != 2 ならば ここから
			0.0 を 終了 。 
		ここまで実行 
		a に a  + b の content [ 0 ] の 整数変換 ( ) を 代入する 。 
		temp という 実数 を b の content [ 1 ] の 整数変換 ( ) で 初期化 。 
		b の content [ 1 ] の 長さ 回繰り返す ここから
			temp に temp  * 0.100000000000000006 を 代入する 。 
		ここまで実行 
		a に a  + temp を 代入する 。 
	ここまで実行 
	( a という 文字列 , b という 文字列 ) を とり ( c という 文字列 ) を 返す ${"ja":"置換", "natja":"置換", "en":"replace", "naten":"replace"}$ という 関数 を おく 。 ここから
		結果 という 文字列 を おく 。 
		開始 という 整数 を 0 で 初期化 。 
		長さ 回繰り返す ここから
			もし content [ カウンタ ]  は a の content [ 0 ] ならば ここから
				もし 範囲切り取り ( カウンタ , a の 長さ )  は a ならば ここから
					結果 に 結果  + 切り取り ( 開始 , カウンタ ) を 代入する 。 
					結果 に 結果  + b を 代入する 。 
					カウンタ に カウンタ  + a の 長さ を 代入する 。 
					開始 に カウンタ を 代入する 。 
				ここまで実行 
			ここまで実行 
		ここまで実行 
		結果 に 結果  + 切り取り ( 開始 , 長さ ) を 代入する 。 
		結果 を 終了 。 
	ここまで実行 
} 
( a という 文字列 ) を とり ${"ja":"文字列表示", "natja":"文字列表示", "en":"printString", "naten":"printString"}$ という 関数 を おく 。 ここから
	a の content , a の 長さ _文字列表示 する 。 
ここまで実行 
( x という 実数 ) を とり ${"ja":"表示", "natja":"表示", "en":"print", "naten":"print"}$ という 関数 を おく 。 ここから
	x 実数表示 する 。 
ここまで実行 
( n という 整数 ) を とり ${"ja":"表示", "natja":"表示", "en":"print", "naten":"print"}$ という 関数 を おく 。 ここから
	n 実数表示 する 。 
ここまで実行 
( n という 整数32 ) を とり ${"ja":"表示", "natja":"表示", "en":"print", "naten":"print"}$ という 関数 を おく 。 ここから
	n 実数表示 する 。 
ここまで実行 
( a という 文字列 ) を とり ${"ja":"表示", "natja":"表示", "en":"print", "naten":"print"}$ という 関数 を おく 。 ここから
	a 文字列表示 する 。 
ここまで実行 
( i という 整数32 , a という 文字列 ) を とり ( loc という 整数32 ) を 返す ${"ja":"glGetUniformLocation", "natja":"glGetUniformLocation", "en":"glGetUniformLocation", "naten":"glGetUniformLocation"}$ という 関数 を おく 。 ここから
	loc に _glGetUniformLocation ( i , a の content , a の 長さ ) を 代入する 。 
ここまで実行 
クラス : ${"ja":"ベクトル3D", "natja":"ベクトル3D", "en":"Vector3D", "naten":"Vector3D"}$ {
公開 : 	x という 実数 を おく 。 
	y という 実数 を おく 。 
	z という 実数 を おく 。 
	( a という 実数 , b という 実数 , c という 実数 ) を とり ベクトル3D という 関数 を おく 。 ここから
		x に a を 代入する 。 
		y に b を 代入する 。 
		z に c を 代入する 。 
	ここまで実行 
	( l という 実数 ) を 返す ${"ja":"長さ", "natja":"長さ", "en":"length", "naten":"length"}$ という 関数 を おく 。 ここから
		l に 平方根 ( x  * x  + y  * y  + z  * z ) を 代入する 。 
	ここまで実行 
	関数 ${"ja":"正規化", "natja":"正規化", "en":"normalize", "naten":"normalize"}$ を おく 。 ここから
		l という 実数 を 平方根 ( ( x  * x )  + ( y  * y )  + ( z  * z ) ) で 初期化 。 
		x に x  / l を 代入する 。 
		y に y  / l を 代入する 。 
		z に z  / l を 代入する 。 
	ここまで実行 
	関数 : 演算子  + ( a という ベクトル3D ) => ( b という ベクトル3D ) ここから
		b の x に a の x  + x を 代入する 。 
		b の y に a の y  + y を 代入する 。 
		b の z に a の z  + z を 代入する 。 
	ここまで実行 
	関数 : 演算子  - ( a という ベクトル3D ) => ( b という ベクトル3D ) ここから
		b の x に a の x  - x を 代入する 。 
		b の y に a の y  - y を 代入する 。 
		b の z に a の z  - z を 代入する 。 
	ここまで実行 
	関数 : 演算子  * ( k という 実数 ) => ( b という ベクトル3D ) ここから
		b の x に x  * k を 代入する 。 
		b の y に y  * k を 代入する 。 
		b の z に z  * k を 代入する 。 
	ここまで実行 
	関数 : 演算子  * ( a という ベクトル3D ) => ( b という ベクトル3D ) ここから
		b の x に y  * a の z  - z  * a の y を 代入する 。 
		b の y に z  * a の x  - x  * a の z を 代入する 。 
		b の z に x  * a の y  - y  * a の x を 代入する 。 
	ここまで実行 
	関数 : 演算子  / ( k という 実数 ) => ( b という ベクトル3D ) ここから
		b の x に x  / k を 代入する 。 
		b の y に y  / k を 代入する 。 
		b の z に z  / k を 代入する 。 
	ここまで実行 
	関数 : 演算子  は ( a という ベクトル3D ) => ( b という 真偽 ) ここから
		b に ( ( a の x  は x )  && ( a の y  は y )  && ( a の z  は z ) ) を 代入する 。 
	ここまで実行 
	関数 : 演算子  != ( a という ベクトル3D ) => ( b という 真偽 ) ここから
		b に ( ( a の x  != x )  || ( a の y  != y )  || ( a の z  != z ) ) を 代入する 。 
	ここまで実行 
} 
( a という ベクトル3D , b という ベクトル3D ) を とり ( result という ベクトル3D ) を 返す ${"ja":"ベクトル3Dの和", "natja":"ベクトル3Dの和", "en":"addVector3D", "naten":"addVector3D"}$ という 関数 を おく 。 ここから
	result の x に a の x  + b の x を 代入する 。 
	result の y に a の y  + b の y を 代入する 。 
	result の z に a の z  + b の z を 代入する 。 
ここまで実行 
( a という ベクトル3D , b という ベクトル3D ) を とり ( result という ベクトル3D ) を 返す ${"ja":"ベクトル3Dの差", "natja":"ベクトル3Dの差", "en":"subVector3D", "naten":"subVector3D"}$ という 関数 を おく 。 ここから
	result の x に a の x  - b の x を 代入する 。 
	result の y に a の y  - b の y を 代入する 。 
	result の z に a の z  - b の z を 代入する 。 
ここまで実行 
( a という ベクトル3D , b という ベクトル3D ) を とり ( x という 実数 ) を 返す ${"ja":"ベクトル3Dの内積", "natja":"ベクトル3Dの内積", "en":"dotVector3D", "naten":"dotVector3D"}$ という 関数 を おく 。 ここから
	x に ( a の x  * b の x )  + ( a の y  * b の y )  + ( a の z  * b の z ) を 代入する 。 
ここまで実行 
( a という ベクトル3D , b という ベクトル3D ) を とり ( result という ベクトル3D ) を 返す ${"ja":"ベクトル3Dの外積", "natja":"ベクトル3Dの外積", "en":"crossVector3D", "naten":"crossVector3D"}$ という 関数 を おく 。 ここから
	result の x に ( a の y  * b の z )  - ( a の z  * b の y ) を 代入する 。 
	result の y に ( a の z  * b の x )  - ( a の x  * b の z ) を 代入する 。 
	result の z に ( a の x  * b の y )  - ( a の y  * b の x ) を 代入する 。 
ここまで実行 
( a という ベクトル3D , x という 実数 ) を とり ( result という ベクトル3D ) を 返す ${"ja":"ベクトル3D拡大", "natja":"ベクトル3D拡大", "en":"extendVector3D", "naten":"extendVector3D"}$ という 関数 を おく 。 ここから
	result の x に a の x  * x を 代入する 。 
	result の y に a の y  * x を 代入する 。 
	result の z に a の z  * x を 代入する 。 
ここまで実行 
( a という ベクトル3D , x という 実数 ) を とり ( result という ベクトル3D ) を 返す ${"ja":"ベクトル3D縮小", "natja":"ベクトル3D縮小", "en":"divVector3D", "naten":"divVector3D"}$ という 関数 を おく 。 ここから
	もし x  は 0.0 ならば ここから
		10000000 表示 する 。 
	ここまで実行 
	result の x に a の x  / x を 代入する 。 
	result の y に a の y  / x を 代入する 。 
	result の z に a の z  / x を 代入する 。 
ここまで実行 
クラス : ${"ja":"行列4x4", "natja":"行列4x4", "en":"Matrix4x4", "naten":"Matrix4x4"}$ {
公開 : 	matrix [ 16 ] という 実数 を おく 。 
	関数 行列4x4 を おく 。 ここから
		matrix に [ 1.0 , 0.0 , 0.0 , 0.0 , 0.0 , 1.0 , 0.0 , 0.0 , 0.0 , 0.0 , 1.0 , 0.0 , 0.0 , 0.0 , 0.0 , 1.0 ] を 代入する 。 
	ここまで実行 
	関数 ${"ja":"単位化", "natja":"単位化", "en":"identity", "naten":"identity"}$ を おく 。 ここから
		matrix に [ 1.0 , 0.0 , 0.0 , 0.0 , 0.0 , 1.0 , 0.0 , 0.0 , 0.0 , 0.0 , 1.0 , 0.0 , 0.0 , 0.0 , 0.0 , 1.0 ] を 代入する 。 
	ここまで実行 
	( offset という ベクトル3D ) を とり ${"ja":"移動", "natja":"移動", "en":"translate", "naten":"translate"}$ という 関数 を おく 。 ここから
		mat12 という 実数 を matrix [ 12 ] で 初期化 。 
		mat13 という 実数 を matrix [ 13 ] で 初期化 。 
		mat14 という 実数 を matrix [ 14 ] で 初期化 。 
		mat15 という 実数 を matrix [ 15 ] で 初期化 。 
		matrix [ 12 ] に matrix [ 0 ]  * offset の x  + matrix [ 4 ]  * offset の y  + matrix [ 8 ]  * offset の z  + mat12 を 代入する 。 
		matrix [ 13 ] に matrix [ 1 ]  * offset の x  + matrix [ 5 ]  * offset の y  + matrix [ 9 ]  * offset の z  + mat13 を 代入する 。 
		matrix [ 14 ] に matrix [ 2 ]  * offset の x  + matrix [ 6 ]  * offset の y  + matrix [ 10 ]  * offset の z  + mat13 を 代入する 。 
		matrix [ 15 ] に matrix [ 3 ]  * offset の x  + matrix [ 7 ]  * offset の y  + matrix [ 11 ]  * offset の z  + mat15 を 代入する 。 
	ここまで実行 
	( axis という ベクトル3D , theta という 実数 ) を とり ${"ja":"回転", "natja":"回転", "en":"rotate", "naten":"rotate"}$ という 関数 を おく 。 ここから
		axis の 正規化 する 。 
		s という 実数 を sin ( theta ) で 初期化 。 
		c という 実数 を cos ( theta ) で 初期化 。 
		t という 実数 を 1.0  - c で 初期化 。 
		a00 という 実数 を matrix [ 0 ] で 初期化 。 
		a01 という 実数 を matrix [ 1 ] で 初期化 。 
		a02 という 実数 を matrix [ 2 ] で 初期化 。 
		a03 という 実数 を matrix [ 3 ] で 初期化 。 
		a10 という 実数 を matrix [ 4 ] で 初期化 。 
		a11 という 実数 を matrix [ 5 ] で 初期化 。 
		a12 という 実数 を matrix [ 6 ] で 初期化 。 
		a13 という 実数 を matrix [ 7 ] で 初期化 。 
		a20 という 実数 を matrix [ 8 ] で 初期化 。 
		a21 という 実数 を matrix [ 9 ] で 初期化 。 
		a22 という 実数 を matrix [ 10 ] で 初期化 。 
		a23 という 実数 を matrix [ 11 ] で 初期化 。 
		b00 という 実数 を axis の x  * axis の x  * t  + c で 初期化 。 
		b01 という 実数 を axis の y  * axis の x  * t  + axis の z  * s で 初期化 。 
		b02 という 実数 を axis の z  * axis の x  * t  - axis の y  * s で 初期化 。 
		b10 という 実数 を axis の x  * axis の y  * t  - axis の z  * s で 初期化 。 
		b11 という 実数 を axis の y  * axis の y  * t  + c で 初期化 。 
		b12 という 実数 を axis の z  * axis の y  * t  + axis の x  * s で 初期化 。 
		b20 という 実数 を axis の x  * axis の z  * t  + axis の y  * s で 初期化 。 
		b21 という 実数 を axis の y  * axis の z  * t  - axis の x  * s で 初期化 。 
		b22 という 実数 を axis の z  * axis の z  * t  + c で 初期化 。 
		matrix [ 0 ] に a00  * b00  + a10  * b01  + a20  * b02 を 代入する 。 
		matrix [ 1 ] に a01  * b00  + a11  * b01  + a21  * b02 を 代入する 。 
		matrix [ 2 ] に a02  * b00  + a12  * b01  + a22  * b02 を 代入する 。 
		matrix [ 3 ] に a03  * b00  + a13  * b01  + a23  * b02 を 代入する 。 
		matrix [ 4 ] に a00  * b10  + a10  * b11  + a20  * b12 を 代入する 。 
		matrix [ 5 ] に a01  * b10  + a11  * b11  + a21  * b12 を 代入する 。 
		matrix [ 6 ] に a02  * b10  + a12  * b11  + a22  * b12 を 代入する 。 
		matrix [ 7 ] に a03  * b10  + a13  * b11  + a23  * b12 を 代入する 。 
		matrix [ 8 ] に a00  * b20  + a10  * b21  + a20  * b22 を 代入する 。 
		matrix [ 9 ] に a01  * b20  + a11  * b21  + a21  * b22 を 代入する 。 
		matrix [ 10 ] に a02  * b20  + a12  * b21  + a22  * b22 を 代入する 。 
		matrix [ 11 ] に a03  * b20  + a13  * b21  + a23  * b22 を 代入する 。 
	ここまで実行 
	( x という 実数 , y という 実数 , z という 実数 ) を とり ${"ja":"拡大縮小", "natja":"拡大縮小", "en":"scale", "naten":"scale"}$ という 関数 を おく 。 ここから
		matrix [ 0 ] に matrix [ 0 ]  * x を 代入する 。 
		matrix [ 1 ] に matrix [ 1 ]  * x を 代入する 。 
		matrix [ 2 ] に matrix [ 2 ]  * x を 代入する 。 
		matrix [ 3 ] に matrix [ 3 ]  * x を 代入する 。 
		matrix [ 4 ] に matrix [ 4 ]  * y を 代入する 。 
		matrix [ 5 ] に matrix [ 5 ]  * y を 代入する 。 
		matrix [ 6 ] に matrix [ 6 ]  * y を 代入する 。 
		matrix [ 7 ] に matrix [ 7 ]  * y を 代入する 。 
		matrix [ 8 ] に matrix [ 8 ]  * z を 代入する 。 
		matrix [ 9 ] に matrix [ 9 ]  * z を 代入する 。 
		matrix [ 10 ] に matrix [ 10 ]  * z を 代入する 。 
		matrix [ 11 ] に matrix [ 11 ]  * z を 代入する 。 
	ここまで実行 
	関数 : 演算子  * ( a という 行列4x4 ) => ( b という 行列4x4 ) ここから
		b の matrix [ 0 ] に a の matrix [ 0 ]  * matrix [ 0 ]  + a の matrix [ 1 ]  * matrix [ 4 ]  + a の matrix [ 2 ]  * matrix [ 8 ]  + a の matrix [ 3 ]  * matrix [ 12 ] を 代入する 。 
		b の matrix [ 1 ] に a の matrix [ 0 ]  * matrix [ 1 ]  + a の matrix [ 1 ]  * matrix [ 5 ]  + a の matrix [ 2 ]  * matrix [ 9 ]  + a の matrix [ 3 ]  * matrix [ 13 ] を 代入する 。 
		b の matrix [ 2 ] に a の matrix [ 0 ]  * matrix [ 2 ]  + a の matrix [ 1 ]  * matrix [ 6 ]  + a の matrix [ 2 ]  * matrix [ 10 ]  + a の matrix [ 3 ]  * matrix [ 14 ] を 代入する 。 
		b の matrix [ 3 ] に a の matrix [ 0 ]  * matrix [ 3 ]  + a の matrix [ 1 ]  * matrix [ 7 ]  + a の matrix [ 2 ]  * matrix [ 11 ]  + a の matrix [ 3 ]  * matrix [ 15 ] を 代入する 。 
		b の matrix [ 4 ] に a の matrix [ 4 ]  * matrix [ 0 ]  + a の matrix [ 5 ]  * matrix [ 4 ]  + a の matrix [ 6 ]  * matrix [ 8 ]  + a の matrix [ 7 ]  * matrix [ 12 ] を 代入する 。 
		b の matrix [ 5 ] に a の matrix [ 4 ]  * matrix [ 1 ]  + a の matrix [ 5 ]  * matrix [ 5 ]  + a の matrix [ 6 ]  * matrix [ 9 ]  + a の matrix [ 7 ]  * matrix [ 13 ] を 代入する 。 
		b の matrix [ 6 ] に a の matrix [ 4 ]  * matrix [ 2 ]  + a の matrix [ 5 ]  * matrix [ 6 ]  + a の matrix [ 6 ]  * matrix [ 10 ]  + a の matrix [ 7 ]  * matrix [ 14 ] を 代入する 。 
		b の matrix [ 7 ] に a の matrix [ 4 ]  * matrix [ 3 ]  + a の matrix [ 5 ]  * matrix [ 7 ]  + a の matrix [ 6 ]  * matrix [ 11 ]  + a の matrix [ 7 ]  * matrix [ 15 ] を 代入する 。 
		b の matrix [ 8 ] に a の matrix [ 8 ]  * matrix [ 0 ]  + a の matrix [ 9 ]  * matrix [ 4 ]  + a の matrix [ 10 ]  * matrix [ 8 ]  + a の matrix [ 11 ]  * matrix [ 12 ] を 代入する 。 
		b の matrix [ 9 ] に a の matrix [ 8 ]  * matrix [ 1 ]  + a の matrix [ 9 ]  * matrix [ 5 ]  + a の matrix [ 10 ]  * matrix [ 9 ]  + a の matrix [ 11 ]  * matrix [ 13 ] を 代入する 。 
		b の matrix [ 10 ] に a の matrix [ 8 ]  * matrix [ 2 ]  + a の matrix [ 9 ]  * matrix [ 6 ]  + a の matrix [ 10 ]  * matrix [ 10 ]  + a の matrix [ 11 ]  * matrix [ 14 ] を 代入する 。 
		b の matrix [ 11 ] に a の matrix [ 8 ]  * matrix [ 3 ]  + a の matrix [ 9 ]  * matrix [ 7 ]  + a の matrix [ 10 ]  * matrix [ 11 ]  + a の matrix [ 11 ]  * matrix [ 15 ] を 代入する 。 
		b の matrix [ 12 ] に a の matrix [ 12 ]  * matrix [ 0 ]  + a の matrix [ 13 ]  * matrix [ 4 ]  + a の matrix [ 14 ]  * matrix [ 8 ]  + a の matrix [ 15 ]  * matrix [ 12 ] を 代入する 。 
		b の matrix [ 13 ] に a の matrix [ 12 ]  * matrix [ 1 ]  + a の matrix [ 13 ]  * matrix [ 5 ]  + a の matrix [ 14 ]  * matrix [ 9 ]  + a の matrix [ 15 ]  * matrix [ 13 ] を 代入する 。 
		b の matrix [ 14 ] に a の matrix [ 12 ]  * matrix [ 2 ]  + a の matrix [ 13 ]  * matrix [ 6 ]  + a の matrix [ 14 ]  * matrix [ 10 ]  + a の matrix [ 15 ]  * matrix [ 14 ] を 代入する 。 
		b の matrix [ 15 ] に a の matrix [ 12 ]  * matrix [ 3 ]  + a の matrix [ 13 ]  * matrix [ 7 ]  + a の matrix [ 14 ]  * matrix [ 11 ]  + a の matrix [ 15 ]  * matrix [ 15 ] を 代入する 。 
	ここまで実行 
} 
( m という 行列4x4 , pos という ベクトル3D , lookAt という ベクトル3D , up という ベクトル3D ) を とり ( res という 行列4x4 ) を 返す ${"ja":"カメラ行列", "natja":"カメラ行列", "en":"setCameraMat", "naten":"setCameraMat"}$ という 関数 を おく 。 ここから
	newForward という ベクトル3D の オブジェクト を lookAt の x  - pos の x , lookAt の y  - pos の y , lookAt の z  - pos の z で 初期化 。 
	a という ベクトル3D の オブジェクト を 0.0 , 0.0 , 0.0 で 初期化 。 
	a に ベクトル3D拡大 ( newForward , ベクトル3Dの内積 ( up , newForward ) ) を 代入する 。 
	newUp という ベクトル3D の オブジェクト を up の x  - a の x , up の y  - a の y , up の z  - a の z で 初期化 。 
	newUp の 正規化 する 。 
	newRight という ベクトル3D の オブジェクト を 0 , 0 , 0 で 初期化 。 
	newRight に ベクトル3Dの外積 ( newUp , newForward ) を 代入する 。 
	m の matrix に [ newRight の x , newUp の x , newForward の x , 0.0 , newRight の y , newUp の y , newForward の y , 0.0 , newRight の z , newUp の z , newForward の z , 0.0 , 0  - ベクトル3Dの内積 ( newRight , pos ) , 0  - ベクトル3Dの内積 ( newUp , pos ) , 0  - ベクトル3Dの内積 ( newForward , pos ) , 1.0 ] を 代入する 。 
	m を 終了 。 
ここまで実行 
( m という 行列4x4 , fov という 実数 , width という 実数 , height という 実数 , zN という 実数 , zF という 実数 ) を とり ( result という 行列4x4 ) を 返す ${"ja":"視点行列3D", "natja":"視点行列3D", "en":"perspectiveMat3D", "naten":"perspectiveMat3D"}$ という 関数 を おく 。 ここから
	PI という 実数 を 3.14159265358979312 で 初期化 。 
	fov という 実数 を 1.0  / tan ( ( 90.0  / 360.0 )  * PI ) で 初期化 。 
	aspectRatio という 実数 を width  / height で 初期化 。 
	zNear という 実数 を zN で 初期化 。 
	zFar という 実数 を zF で 初期化 。 
	zQ という 実数 を zF  / ( zF  - zN ) で 初期化 。 
	m の matrix に [ aspectRatio  * fov , 0.0 , 0.0 , 0.0 , 0.0 , fov , 0.0 , 0.0 , 0.0 , 0.0 , zQ , 1.0 , 0.0 , 0.0 , ( 0  - zFar  * zNear )  / ( zFar  - zNear ) , 0.0 ] を 代入する 。 
	m を 終了 。 
ここまで実行 
( m という 行列4x4 , left という 実数 , right という 実数 , bottom という 実数 , top という 実数 , near という 実数 , far という 実数 ) を とり ( result という 行列4x4 ) を 返す ${"ja":"視点行列2D", "natja":"視点行列2D", "en":"perspectiveMat2D", "naten":"perspectiveMat2D"}$ という 関数 を おく 。 ここから
	m の matrix に [ 2.0  / ( right  - left ) , 0.0 , 0.0 , 0.0 , 0.0 , 2.0  / ( top  - bottom ) , 0.0 , 0.0 , 0.0 , 0.0 , 0  - 2.0  / ( near  - far ) , 0.0 , 0  - ( right  + left )  / ( right  - left ) , 0  - ( top  + bottom )  / ( top  - bottom ) , 0  - ( far  + near )  / ( far  - near ) , 1.0 ] を 代入する 。 
	m を 終了 。 
ここまで実行 
( a という 行列4x4 , b という 行列4x4 ) を とり ( out という 行列4x4 ) を 返す ${"ja":"行列4x4の積", "natja":"行列4x4の積", "en":"mulMatrix4x4", "naten":"mulMatrix4x4"}$ という 関数 を おく 。 ここから
	out の matrix [ 0 ] に b の matrix [ 0 ]  * a の matrix [ 0 ]  + b の matrix [ 1 ]  * a の matrix [ 4 ]  + b の matrix [ 2 ]  * a の matrix [ 8 ]  + b の matrix [ 3 ]  * a の matrix [ 12 ] を 代入する 。 
	out の matrix [ 1 ] に b の matrix [ 0 ]  * a の matrix [ 1 ]  + b の matrix [ 1 ]  * a の matrix [ 5 ]  + b の matrix [ 2 ]  * a の matrix [ 9 ]  + b の matrix [ 3 ]  * a の matrix [ 13 ] を 代入する 。 
	out の matrix [ 2 ] に b の matrix [ 0 ]  * a の matrix [ 2 ]  + b の matrix [ 1 ]  * a の matrix [ 6 ]  + b の matrix [ 2 ]  * a の matrix [ 10 ]  + b の matrix [ 3 ]  * a の matrix [ 14 ] を 代入する 。 
	out の matrix [ 3 ] に b の matrix [ 0 ]  * a の matrix [ 3 ]  + b の matrix [ 1 ]  * a の matrix [ 7 ]  + b の matrix [ 2 ]  * a の matrix [ 11 ]  + b の matrix [ 3 ]  * a の matrix [ 15 ] を 代入する 。 
	out の matrix [ 4 ] に b の matrix [ 4 ]  * a の matrix [ 0 ]  + b の matrix [ 5 ]  * a の matrix [ 4 ]  + b の matrix [ 6 ]  * a の matrix [ 8 ]  + b の matrix [ 7 ]  * a の matrix [ 12 ] を 代入する 。 
	out の matrix [ 5 ] に b の matrix [ 4 ]  * a の matrix [ 1 ]  + b の matrix [ 5 ]  * a の matrix [ 5 ]  + b の matrix [ 6 ]  * a の matrix [ 9 ]  + b の matrix [ 7 ]  * a の matrix [ 13 ] を 代入する 。 
	out の matrix [ 6 ] に b の matrix [ 4 ]  * a の matrix [ 2 ]  + b の matrix [ 5 ]  * a の matrix [ 6 ]  + b の matrix [ 6 ]  * a の matrix [ 10 ]  + b の matrix [ 7 ]  * a の matrix [ 14 ] を 代入する 。 
	out の matrix [ 7 ] に b の matrix [ 4 ]  * a の matrix [ 3 ]  + b の matrix [ 5 ]  * a の matrix [ 7 ]  + b の matrix [ 6 ]  * a の matrix [ 11 ]  + b の matrix [ 7 ]  * a の matrix [ 15 ] を 代入する 。 
	out の matrix [ 8 ] に b の matrix [ 8 ]  * a の matrix [ 0 ]  + b の matrix [ 9 ]  * a の matrix [ 4 ]  + b の matrix [ 10 ]  * a の matrix [ 8 ]  + b の matrix [ 11 ]  * a の matrix [ 12 ] を 代入する 。 
	out の matrix [ 9 ] に b の matrix [ 8 ]  * a の matrix [ 1 ]  + b の matrix [ 9 ]  * a の matrix [ 5 ]  + b の matrix [ 10 ]  * a の matrix [ 9 ]  + b の matrix [ 11 ]  * a の matrix [ 13 ] を 代入する 。 
	out の matrix [ 10 ] に b の matrix [ 8 ]  * a の matrix [ 2 ]  + b の matrix [ 9 ]  * a の matrix [ 6 ]  + b の matrix [ 10 ]  * a の matrix [ 10 ]  + b の matrix [ 11 ]  * a の matrix [ 14 ] を 代入する 。 
	out の matrix [ 11 ] に b の matrix [ 8 ]  * a の matrix [ 3 ]  + b の matrix [ 9 ]  * a の matrix [ 7 ]  + b の matrix [ 10 ]  * a の matrix [ 11 ]  + b の matrix [ 11 ]  * a の matrix [ 15 ] を 代入する 。 
	out の matrix [ 12 ] に b の matrix [ 12 ]  * a の matrix [ 0 ]  + b の matrix [ 13 ]  * a の matrix [ 4 ]  + b の matrix [ 14 ]  * a の matrix [ 8 ]  + b の matrix [ 15 ]  * a の matrix [ 12 ] を 代入する 。 
	out の matrix [ 13 ] に b の matrix [ 12 ]  * a の matrix [ 1 ]  + b の matrix [ 13 ]  * a の matrix [ 5 ]  + b の matrix [ 14 ]  * a の matrix [ 9 ]  + b の matrix [ 15 ]  * a の matrix [ 13 ] を 代入する 。 
	out の matrix [ 14 ] に b の matrix [ 12 ]  * a の matrix [ 2 ]  + b の matrix [ 13 ]  * a の matrix [ 6 ]  + b の matrix [ 14 ]  * a の matrix [ 10 ]  + b の matrix [ 15 ]  * a の matrix [ 14 ] を 代入する 。 
	out の matrix [ 15 ] に b の matrix [ 12 ]  * a の matrix [ 3 ]  + b の matrix [ 13 ]  * a の matrix [ 7 ]  + b の matrix [ 14 ]  * a の matrix [ 11 ]  + b の matrix [ 15 ]  * a の matrix [ 15 ] を 代入する 。 
ここまで実行 
クラス : ${"ja":"モデル", "natja":"モデル", "en":"Model", "naten":"Model"}$ {
公開 : 	${"ja":"色", "natja":"色", "en":"color", "naten":"color"}$ という ベクトル3D を おく 。 
	${"ja":"座標", "natja":"座標", "en":"pos", "naten":"pos"}$ という ベクトル3D を おく 。 
	( data という * 実数 , num という 整数 , c という ベクトル3D , p という ベクトル3D , s という 整数 ) を とり モデル という 関数 を おく 。 ここから
		vertices に data を 代入する 。 
		vertexNum に num を 代入する 。 
		色 に c を 代入する 。 
		座標 に p を 代入する 。 
		shaderID に s を 代入する 。 
		modelMat の 単位化 する 。 
		transMat の 単位化 する 。 
		scaleMat の 単位化 する 。 
		rotateMat の 単位化 する 。 
		もし shaderID  は 0 ならば ここから
			viewPosUniLoc に glGetUniformLocation ( 0 , "viewPos") を 代入する 。 
			lightPosUniLoc に glGetUniformLocation ( 0 , "lightPos") を 代入する 。 
			lightColorUniLoc に glGetUniformLocation ( 0 , "lightColor") を 代入する 。 
			objectColorUniLoc に glGetUniformLocation ( 0 , "objectColor") を 代入する 。 
		ここまで実行 
		projMatUniformLoc に glGetUniformLocation ( shaderID , "uProjMat") を 代入する 。 
		viewMatUniformLoc に glGetUniformLocation ( shaderID , "uViewMat") を 代入する 。 
		modelMatUniformLoc に glGetUniformLocation ( shaderID , "uModelMat") を 代入する 。 
		buffer に glCreateBuffer ( ) を 代入する 。 
		34962 , buffer glBindBuffer する 。 
		34962 , vertices , num  * 6 , 35044 glBufferData する 。 
	ここまで実行 
	( coord という ベクトル3D ) を とり ${"ja":"座標設定", "natja":"座標設定", "en":"setPos", "naten":"setPos"}$ という 関数 を おく 。 ここから
		座標 に coord を 代入する 。 
	ここまで実行 
	( offset という ベクトル3D ) を とり ${"ja":"移動", "natja":"移動", "en":"translate", "naten":"translate"}$ という 関数 を おく 。 ここから
		座標 に ベクトル3Dの和 ( 座標 , offset ) を 代入する 。 
	ここまで実行 
	( x という 実数 , y という 実数 , z という 実数 ) を とり ${"ja":"拡大縮小", "natja":"拡大縮小", "en":"scale", "naten":"scale"}$ という 関数 を おく 。 ここから
		temp という 行列4x4 を おく 。 
		temp の 単位化 する 。 
		x , y , z temp の 拡大縮小 する 。 
		scaleMat に 行列4x4の積 ( temp , scaleMat ) を 代入する 。 
	ここまで実行 
	( axis という ベクトル3D , t という 実数 ) を とり ${"ja":"回転", "natja":"回転", "en":"rotate", "naten":"rotate"}$ という 関数 を おく 。 ここから
		temp という 行列4x4 を おく 。 
		temp の 単位化 する 。 
		axis , t temp の 回転 する 。 
		rotateMat に 行列4x4の積 ( temp , rotateMat ) を 代入する 。 
	ここまで実行 
	( projMat という 行列4x4 , viewMat という 行列4x4 , camera という ベクトル3D ) を とり ${"ja":"描画", "natja":"描画", "en":"draw", "naten":"draw"}$ という 関数 を おく 。 ここから
		PI という 実数 を 3.14159265358979312 で 初期化 。 
		座標 transMat の 移動 する 。 
		modelMat の 単位化 する 。 
		modelMat に 行列4x4の積 ( scaleMat , modelMat ) を 代入する 。 
		modelMat に 行列4x4の積 ( rotateMat , modelMat ) を 代入する 。 
		modelMat に 行列4x4の積 ( transMat , modelMat ) を 代入する 。 
		34962 , buffer glBindBuffer する 。 
		0 glEnableVertexAttribArray する 。 
		0 , 3 , 5126 , 0 , 6  * 4 , 0 glVertexAttribPointer する 。 
		1 glEnableVertexAttribArray する 。 
		1 , 3 , 5126 , 0 , 6  * 4 , 3  * 4 glVertexAttribPointer する 。 
		shaderID glUseProgram する 。 
		もし shaderID  は 0 ならば ここから
			lightPosUniLoc , 5.0 , 5.0 , 5.0 glUniform3f する 。 
			lightColorUniLoc , 1.0 , 1.0 , 1.0 glUniform3f する 。 
			objectColorUniLoc , 色 の x , 色 の y , 色 の z glUniform3f する 。 
			viewPosUniLoc , camera の x , camera の y , camera の z glUniform3f する 。 
		ここまで実行 
		projMatUniformLoc , 0 , projMat の matrix glUniformMatrix4fv する 。 
		viewMatUniformLoc , 0 , viewMat の matrix glUniformMatrix4fv する 。 
		modelMatUniformLoc , 0 , modelMat の matrix glUniformMatrix4fv する 。 
		4 , 0 , 36 glDrawArrays する 。 
		rotateMat の 単位化 する 。 
		transMat の 単位化 する 。 
		scaleMat の 単位化 する 。 
	ここまで実行 
非公開 : 	vertices という * 実数 を おく 。 
	vertexNum という 整数 を おく 。 
	buffer という 整数32 を おく 。 
	modelMat という 行列4x4 を おく 。 
	transMat という 行列4x4 を おく 。 
	scaleMat という 行列4x4 を おく 。 
	rotateMat という 行列4x4 を おく 。 
	shaderID という 整数 を おく 。 
	viewPosUniLoc という 整数32 を おく 。 
	lightPosUniLoc という 整数32 を おく 。 
	lightColorUniLoc という 整数32 を おく 。 
	objectColorUniLoc という 整数32 を おく 。 
	projMatUniformLoc という 整数32 を おく 。 
	viewMatUniformLoc という 整数32 を おく 。 
	modelMatUniformLoc という 整数32 を おく 。 
} 
クラス : ${"ja":"カメラ", "natja":"カメラ", "en":"Camera", "naten":"Camera"}$ {
公開 : 	${"ja":"座標", "natja":"座標", "en":"pos", "naten":"pos"}$ という ベクトル3D を おく 。 
	${"ja":"感度", "natja":"感度", "en":"sensitivity", "naten":"sensitivity"}$ という 実数 を おく 。 
	( p という ベクトル3D ) を とり カメラ という 関数 を おく 。 ここから
		座標 に p を 代入する 。 
		0.0 , 0.0 , 1.0 view の ベクトル3D する 。 
		0.0 , 0.0 , 1.0 lookDir の ベクトル3D する 。 
		0.0 , 1.0 , 0.0 up の ベクトル3D する 。 
		yaw に 90.0 を 代入する 。 
		pitch に 0.0 を 代入する 。 
		感度 に 0.100000000000000006 を 代入する 。 
	ここまで実行 
	( s という 実数 ) を とり ${"ja":"感度設定", "natja":"感度設定", "en":"setSensitivity", "naten":"setSensitivity"}$ という 関数 を おく 。 ここから
		感度 に s を 代入する 。 
	ここまで実行 
	( xOffset という 実数 , yOffset という 実数 , elapsedTime という 実数 ) を とり ( result という 行列4x4 ) を 返す ${"ja":"アップデート", "natja":"アップデート", "en":"update", "naten":"update"}$ という 関数 を おく 。 ここから
		もし キーチェック ( 32 )  は 1 ならば ここから
			座標 の y に 座標 の y  + elapsedTime  * 5.0 を 代入する 。 
		ここまで実行 
		もし キーチェック ( 16 )  は 1 ならば ここから
			座標 の y に 座標 の y  - elapsedTime  * 5.0 を 代入する 。 
		ここまで実行 
		もし キーチェック ( 65 )  は 1 ならば ここから
			座標 の z に 座標 の z  - elapsedTime  * sin ( ラジアンへ ( yaw  - 90 ) )  * 5.0 を 代入する 。 
			座標 の x に 座標 の x  - elapsedTime  * cos ( ラジアンへ ( yaw  - 90 ) )  * 5.0 を 代入する 。 
		ここまで実行 
		もし キーチェック ( 68 )  は 1 ならば ここから
			座標 の z に 座標 の z  + elapsedTime  * sin ( ラジアンへ ( yaw  - 90 ) )  * 5.0 を 代入する 。 
			座標 の x に 座標 の x  + elapsedTime  * cos ( ラジアンへ ( yaw  - 90 ) )  * 5.0 を 代入する 。 
		ここまで実行 
		もし キーチェック ( 87 )  は 1 ならば ここから
			座標 の z に 座標 の z  + elapsedTime  * sin ( ラジアンへ ( yaw ) )  * 5.0 を 代入する 。 
			座標 の x に 座標 の x  + elapsedTime  * cos ( ラジアンへ ( yaw ) )  * 5.0 を 代入する 。 
		ここまで実行 
		もし キーチェック ( 83 )  は 1 ならば ここから
			座標 の z に 座標 の z  - elapsedTime  * sin ( ラジアンへ ( yaw ) )  * 5.0 を 代入する 。 
			座標 の x に 座標 の x  - elapsedTime  * cos ( ラジアンへ ( yaw ) )  * 5.0 を 代入する 。 
		ここまで実行 
		yaw に yaw  - xOffset  * 感度 を 代入する 。 
		pitch に pitch  - yOffset  * 感度 を 代入する 。 
		もし pitch  < 0  - 89.0 ならば ここから
			pitch に 0  - 89.0 を 代入する 。 
		ここまで実行 
		もし pitch  > 89.0 ならば ここから
			pitch に 89.0 を 代入する 。 
		ここまで実行 
		lookDir の x に cos ( ラジアンへ ( yaw ) )  * cos ( ラジアンへ ( pitch ) ) を 代入する 。 
		lookDir の y に sin ( ラジアンへ ( pitch ) ) を 代入する 。 
		lookDir の z に sin ( ラジアンへ ( yaw ) )  * cos ( ラジアンへ ( pitch ) ) を 代入する 。 
		lookDir の 正規化 する 。 
		result の 単位化 する 。 
		view に ベクトル3Dの和 ( lookDir , 座標 ) を 代入する 。 
		result に カメラ行列 ( result , 座標 , view , up ) を 代入する 。 
	ここまで実行 
非公開 : 	view という ベクトル3D を おく 。 
	lookDir という ベクトル3D を おく 。 
	up という ベクトル3D を おく 。 
	yaw という 実数 を おく 。 
	pitch という 実数 を おく 。 
} 
クラス : ${"ja":"シーン", "natja":"シーン", "en":"Scene", "naten":"Scene"}$ {
公開 : 	${"ja":"スプライト配列", "natja":"スプライト配列", "en":"sprites", "naten":"sprites"}$ という 配列 < * モデル > を おく 。 
	${"ja":"目", "natja":"目", "en":"camera", "naten":"camera"}$ という カメラ を おく 。 
	関数 シーン を おく 。 ここから
		last に 時間計測 ( )  / 1000.0 を 代入する 。 
		now に 0.0 を 代入する 。 
		elapsedTime に 0.0 を 代入する 。 
		lastX に マウス絶対座標X ( ) を 代入する 。 
		lastY に マウス絶対座標Y ( ) を 代入する 。 
		projMat の 単位化 する 。 
		viewMat の 単位化 する 。 
		projMat に 視点行列3D ( projMat , 90.0 , 720.0 , 1280.0 , 0.100000000000000006 , 100.0 ) を 代入する 。 
		temp という ベクトル3D の オブジェクト を 0.0 , 0.0 , 0  - 4.0 で 初期化 。 
		temp 目 の カメラ する 。 
		スプライト配列 の 配列 する 。 
	ここまで実行 
	関数 ${"ja":"描画", "natja":"描画", "en":"draw", "naten":"draw"}$ を おく 。 ここから
		now に 時間計測 ( )  / 1000.0 を 代入する 。 
		elapsedTime に now  - last を 代入する 。 
		last に now を 代入する 。 
		0.0 , 0.0 , 0.0 , 1.0 glClearColor する 。 
		1.0 glClearDepth する 。 
		2929 glEnable する 。 
		515 glDepthFunc する 。 
		16640 glClear する 。 
		xOffset という 実数 を マウス絶対座標X ( )  - lastX で 初期化 。 
		yOffset という 実数 を マウス絶対座標Y ( )  - lastY で 初期化 。 
		lastX に マウス絶対座標X ( ) を 代入する 。 
		lastY に マウス絶対座標Y ( ) を 代入する 。 
		viewMat の 単位化 する 。 
		viewMat に 目 の アップデート ( xOffset , yOffset , elapsedTime ) を 代入する 。 
		( i という 整数 を 0 で 初期化 。 ) から ( i  は スプライト配列 の size ) まで ( i に i  + 1 を 代入する 。 ) 繰り返し ここから
			projMat , viewMat , 目 の 座標 スプライト配列 の 取得 ( i ) -> 描画 する 。 
		ここまで実行 
	ここまで実行 
	( size という 実数 , 色 という ベクトル3D , 座標 という ベクトル3D ) を とり ( id という 整数 ) を 返す ${"ja":"キューブ追加", "natja":"キューブ追加", "en":"addCube", "naten":"addCube"}$ という 関数 を おく 。 ここから
		vertices [ 12 ] [ 3 ] [ 6 ] という 実数 を [ [ [ 0  - size  / 2 , 0  - size  / 2 , 0  - size  / 2 , 0.0 , 0.0 , 0  - 1.0 ] , [ 0  - size  / 2 , size  / 2 , 0  - size  / 2 , 0.0 , 0.0 , 0  - 1.0 ] , [ size  / 2 , size  / 2 , 0  - size  / 2 , 0.0 , 0.0 , 0  - 1.0 ] ] , [ [ 0  - size  / 2 , 0  - size  / 2 , 0  - size  / 2 , 0.0 , 0.0 , 0  - 1.0 ] , [ size  / 2 , size  / 2 , 0  - size  / 2 , 0.0 , 0.0 , 0  - 1.0 ] , [ size  / 2 , 0  - size  / 2 , 0  - size  / 2 , 0.0 , 0.0 , 0  - 1.0 ] ] , [ [ size  / 2 , 0  - size  / 2 , 0  - size  / 2 , 1.0 , 0.0 , 0.0 ] , [ size  / 2 , size  / 2 , 0  - size  / 2 , 1.0 , 0.0 , 0.0 ] , [ size  / 2 , size  / 2 , size  / 2 , 1.0 , 0.0 , 0.0 ] ] , [ [ size  / 2 , 0  - size  / 2 , 0  - size  / 2 , 1.0 , 0.0 , 0.0 ] , [ size  / 2 , size  / 2 , size  / 2 , 1.0 , 0.0 , 0.0 ] , [ size  / 2 , 0  - size  / 2 , size  / 2 , 1.0 , 0.0 , 0.0 ] ] , [ [ size  / 2 , 0  - size  / 2 , size  / 2 , 0.0 , 0.0 , 1.0 ] , [ size  / 2 , size  / 2 , size  / 2 , 0.0 , 0.0 , 1.0 ] , [ 0  - size  / 2 , size  / 2 , size  / 2 , 0.0 , 0.0 , 1.0 ] ] , [ [ size  / 2 , 0  - size  / 2 , size  / 2 , 0.0 , 0.0 , 1.0 ] , [ 0  - size  / 2 , size  / 2 , size  / 2 , 0.0 , 0.0 , 1.0 ] , [ 0  - size  / 2 , 0  - size  / 2 , size  / 2 , 0.0 , 0.0 , 1.0 ] ] , [ [ 0  - size  / 2 , 0  - size  / 2 , size  / 2 , 0  - 1.0 , 0.0 , 0.0 ] , [ 0  - size  / 2 , size  / 2 , size  / 2 , 0  - 1.0 , 0.0 , 0.0 ] , [ 0  - size  / 2 , size  / 2 , 0  - size  / 2 , 0  - 1.0 , 0.0 , 0.0 ] ] , [ [ 0  - size  / 2 , 0  - size  / 2 , size  / 2 , 0  - 1.0 , 0.0 , 0.0 ] , [ 0  - size  / 2 , size  / 2 , 0  - size  / 2 , 0  - 1.0 , 0.0 , 0.0 ] , [ 0  - size  / 2 , 0  - size  / 2 , 0  - size  / 2 , 0  - 1.0 , 0.0 , 0.0 ] ] , [ [ 0  - size  / 2 , size  / 2 , 0  - size  / 2 , 0.0 , 1.0 , 0.0 ] , [ 0  - size  / 2 , size  / 2 , size  / 2 , 0.0 , 1.0 , 0.0 ] , [ size  / 2 , size  / 2 , size  / 2 , 0.0 , 1.0 , 0.0 ] ] , [ [ 0  - size  / 2 , size  / 2 , 0  - size  / 2 , 0.0 , 1.0 , 0.0 ] , [ size  / 2 , size  / 2 , size  / 2 , 0.0 , 1.0 , 0.0 ] , [ size  / 2 , size  / 2 , 0  - size  / 2 , 0.0 , 1.0 , 0.0 ] ] , [ [ size  / 2 , 0  - size  / 2 , size  / 2 , 0.0 , 0  - 1.0 , 0.0 ] , [ 0  - size  / 2 , 0  - size  / 2 , size  / 2 , 0.0 , 0  - 1.0 , 0.0 ] , [ 0  - size  / 2 , 0  - size  / 2 , 0  - size  / 2 , 0.0 , 0  - 1.0 , 0.0 ] ] , [ [ size  / 2 , 0  - size  / 2 , size  / 2 , 0.0 , 0  - 1.0 , 0.0 ] , [ 0  - size  / 2 , 0  - size  / 2 , 0  - size  / 2 , 0.0 , 0  - 1.0 , 0.0 ] , [ size  / 2 , 0  - size  / 2 , 0  - size  / 2 , 0.0 , 0  - 1.0 , 0.0 ] ] ] で 初期化 。 
		cube という * モデル を メモリ確保 ( バイト数 ( cube に ある オブジェクト ) ) で 初期化 。 
		& vertices , 36 , 色 , 座標 , 0 cube -> モデル する 。 
		cube スプライト配列 の 追加 する 。 
		id に スプライト配列 の 長さ ( )  - 1 を 代入する 。 
	ここまで実行 
	( size という 実数 , 色 という ベクトル3D , 座標 という ベクトル3D ) を とり ( id という 整数 ) を 返す ${"ja":"ライト追加", "natja":"ライト追加", "en":"addLight", "naten":"addLight"}$ という 関数 を おく 。 ここから
		vertices [ 12 ] [ 3 ] [ 6 ] という 実数 を [ [ [ 0  - size  / 2 , 0  - size  / 2 , 0  - size  / 2 , 0.0 , 0.0 , 0  - 1.0 ] , [ 0  - size  / 2 , size  / 2 , 0  - size  / 2 , 0.0 , 0.0 , 0  - 1.0 ] , [ size  / 2 , size  / 2 , 0  - size  / 2 , 0.0 , 0.0 , 0  - 1.0 ] ] , [ [ 0  - size  / 2 , 0  - size  / 2 , 0  - size  / 2 , 0.0 , 0.0 , 0  - 1.0 ] , [ size  / 2 , size  / 2 , 0  - size  / 2 , 0.0 , 0.0 , 0  - 1.0 ] , [ size  / 2 , 0  - size  / 2 , 0  - size  / 2 , 0.0 , 0.0 , 0  - 1.0 ] ] , [ [ size  / 2 , 0  - size  / 2 , 0  - size  / 2 , 1.0 , 0.0 , 0.0 ] , [ size  / 2 , size  / 2 , 0  - size  / 2 , 1.0 , 0.0 , 0.0 ] , [ size  / 2 , size  / 2 , size  / 2 , 1.0 , 0.0 , 0.0 ] ] , [ [ size  / 2 , 0  - size  / 2 , 0  - size  / 2 , 1.0 , 0.0 , 0.0 ] , [ size  / 2 , size  / 2 , size  / 2 , 1.0 , 0.0 , 0.0 ] , [ size  / 2 , 0  - size  / 2 , size  / 2 , 1.0 , 0.0 , 0.0 ] ] , [ [ size  / 2 , 0  - size  / 2 , size  / 2 , 0.0 , 0.0 , 1.0 ] , [ size  / 2 , size  / 2 , size  / 2 , 0.0 , 0.0 , 1.0 ] , [ 0  - size  / 2 , size  / 2 , size  / 2 , 0.0 , 0.0 , 1.0 ] ] , [ [ size  / 2 , 0  - size  / 2 , size  / 2 , 0.0 , 0.0 , 1.0 ] , [ 0  - size  / 2 , size  / 2 , size  / 2 , 0.0 , 0.0 , 1.0 ] , [ 0  - size  / 2 , 0  - size  / 2 , size  / 2 , 0.0 , 0.0 , 1.0 ] ] , [ [ 0  - size  / 2 , 0  - size  / 2 , size  / 2 , 0  - 1.0 , 0.0 , 0.0 ] , [ 0  - size  / 2 , size  / 2 , size  / 2 , 0  - 1.0 , 0.0 , 0.0 ] , [ 0  - size  / 2 , size  / 2 , 0  - size  / 2 , 0  - 1.0 , 0.0 , 0.0 ] ] , [ [ 0  - size  / 2 , 0  - size  / 2 , size  / 2 , 0  - 1.0 , 0.0 , 0.0 ] , [ 0  - size  / 2 , size  / 2 , 0  - size  / 2 , 0  - 1.0 , 0.0 , 0.0 ] , [ 0  - size  / 2 , 0  - size  / 2 , 0  - size  / 2 , 0  - 1.0 , 0.0 , 0.0 ] ] , [ [ 0  - size  / 2 , size  / 2 , 0  - size  / 2 , 0.0 , 1.0 , 0.0 ] , [ 0  - size  / 2 , size  / 2 , size  / 2 , 0.0 , 1.0 , 0.0 ] , [ size  / 2 , size  / 2 , size  / 2 , 0.0 , 1.0 , 0.0 ] ] , [ [ 0  - size  / 2 , size  / 2 , 0  - size  / 2 , 0.0 , 1.0 , 0.0 ] , [ size  / 2 , size  / 2 , size  / 2 , 0.0 , 1.0 , 0.0 ] , [ size  / 2 , size  / 2 , 0  - size  / 2 , 0.0 , 1.0 , 0.0 ] ] , [ [ size  / 2 , 0  - size  / 2 , size  / 2 , 0.0 , 0  - 1.0 , 0.0 ] , [ 0  - size  / 2 , 0  - size  / 2 , size  / 2 , 0.0 , 0  - 1.0 , 0.0 ] , [ 0  - size  / 2 , 0  - size  / 2 , 0  - size  / 2 , 0.0 , 0  - 1.0 , 0.0 ] ] , [ [ size  / 2 , 0  - size  / 2 , size  / 2 , 0.0 , 0  - 1.0 , 0.0 ] , [ 0  - size  / 2 , 0  - size  / 2 , 0  - size  / 2 , 0.0 , 0  - 1.0 , 0.0 ] , [ size  / 2 , 0  - size  / 2 , 0  - size  / 2 , 0.0 , 0  - 1.0 , 0.0 ] ] ] で 初期化 。 
		light という * モデル を メモリ確保 ( バイト数 ( light に ある オブジェクト ) ) で 初期化 。 
		& vertices , 36 , 色 , 座標 , 1 light -> モデル する 。 
		light スプライト配列 の 追加 する 。 
		id に スプライト配列 の 長さ ( )  - 1 を 代入する 。 
	ここまで実行 
非公開 : 	projMat という 行列4x4 を おく 。 
	viewMat という 行列4x4 を おく 。 
	last という 実数 を おく 。 
	now という 実数 を おく 。 
	elapsedTime という 実数 を おく 。 
	lastX という 実数 を おく 。 
	lastY という 実数 を おく 。 
} 
クラス : ${"ja":"ベクトル2D", "natja":"ベクトル2D", "en":"Vector2D", "naten":"Vector2D"}$ {
公開 : 	x という 実数 を おく 。 
	y という 実数 を おく 。 
	( a という 実数 , b という 実数 ) を とり ベクトル2D という 関数 を おく 。 ここから
		x に a を 代入する 。 
		y に b を 代入する 。 
	ここまで実行 
	( l という 実数 ) を 返す ${"ja":"長さ", "natja":"長さ", "en":"length", "naten":"length"}$ という 関数 を おく 。 ここから
		l に 平方根 ( x  * x  + y  * y ) を 代入する 。 
	ここまで実行 
	関数 ${"ja":"正規化", "natja":"正規化", "en":"normalize", "naten":"normalize"}$ を おく 。 ここから
		l という 実数 を 平方根 ( x  * x  + y  * y ) で 初期化 。 
		x に x  / l を 代入する 。 
		y に y  / l を 代入する 。 
	ここまで実行 
	関数 : 演算子  は ( a という ベクトル2D ) => ( b という 真偽 ) ここから
		b に ( ( a の x  は x )  && ( a の y  は y ) ) を 代入する 。 
	ここまで実行 
	関数 : 演算子  != ( a という ベクトル2D ) => ( b という 真偽 ) ここから
		b に ( ( a の x  != x )  || ( a の y  != y ) ) を 代入する 。 
	ここまで実行 
} 
( a という ベクトル2D , b という ベクトル2D ) を とり ( result という ベクトル2D ) を 返す ${"ja":"ベクトル2Dの和", "natja":"ベクトル2Dの和", "en":"addVector2D", "naten":"addVector2D"}$ という 関数 を おく 。 ここから
	result の x に a の x  + b の x を 代入する 。 
	result の y に a の y  + b の y を 代入する 。 
ここまで実行 
( a という ベクトル2D , b という ベクトル2D ) を とり ( result という ベクトル2D ) を 返す ${"ja":"ベクトル2Dの差", "natja":"ベクトル2Dの差", "en":"subVector2D", "naten":"subVector2D"}$ という 関数 を おく 。 ここから
	result の x に a の x  - b の x を 代入する 。 
	result の y に a の y  - b の y を 代入する 。 
ここまで実行 
( a という ベクトル2D , b という ベクトル2D ) を とり ( x という 実数 ) を 返す ${"ja":"ベクトル2Dの内積", "natja":"ベクトル2Dの内積", "en":"dotVector2D", "naten":"dotVector2D"}$ という 関数 を おく 。 ここから
	x に a の x  * b の x  + a の y  * b の y を 代入する 。 
ここまで実行 
( a という ベクトル2D , x という 実数 ) を とり ( result という ベクトル2D ) を 返す ${"ja":"ベクトル2D拡大", "natja":"ベクトル2D拡大", "en":"extendVector2D", "naten":"extendVector2D"}$ という 関数 を おく 。 ここから
	result の x に a の x  * x を 代入する 。 
	result の y に a の y  * x を 代入する 。 
ここまで実行 
( a という ベクトル2D , x という 実数 ) を とり ( result という ベクトル2D ) を 返す ${"ja":"ベクトル2D縮小", "natja":"ベクトル2D縮小", "en":"divVector2D", "naten":"divVector2D"}$ という 関数 を おく 。 ここから
	もし x  は 0.0 ならば ここから
		10000000 表示 する 。 
	ここまで実行 
	result の x に a の x  / x を 代入する 。 
	result の y に a の y  / x を 代入する 。 
ここまで実行 
クラス : ${"ja":"アニメーション情報", "natja":"アニメーション情報", "en":"AnimationInfo", "naten":"AnimationInfo"}$ {
公開 : 	id という 整数 を おく 。 
	startTime という 実数 を おく 。 
	duration という 実数 を おく 。 
	info という ベクトル2D を おく 。 
	( a という 整数 , start という 実数 , d という 実数 , x という 実数 , y という 実数 ) を とり アニメーション情報 という 関数 を おく 。 ここから
		id に a を 代入する 。 
		startTime に start を 代入する 。 
		duration に d を 代入する 。 
		info の x に x を 代入する 。 
		info の y に y を 代入する 。 
	ここまで実行 
	関数 アニメーション情報 を おく 。 ここから
		id に 0 を 代入する 。 
		startTime に 0 を 代入する 。 
		duration に 0 を 代入する 。 
		info の x に 0 を 代入する 。 
		info の y に 0 を 代入する 。 
	ここまで実行 
	関数 : 演算子  は ( a という アニメーション情報 ) => ( b という 真偽 ) ここから
		b に ( ( a の id  は id )  && ( a の startTime  は startTime )  && ( a の duration  は duration )  && ( a の info  は info )  && ( a の info  は info ) ) を 代入する 。 
	ここまで実行 
	関数 : 演算子  != ( a という アニメーション情報 ) => ( b という 真偽 ) ここから
		b に ( ( a の id  != id )  || ( a の startTime  != startTime )  || ( a の duration  != duration )  || ( a の info  != info )  || ( a の info  != info ) ) を 代入する 。 
	ここまで実行 
} 
クラス : ${"ja":"スプライト", "natja":"スプライト", "en":"Sprite", "naten":"Sprite"}$ {
公開 : 	色 という ベクトル3D を おく 。 
	座標 という ベクトル2D を おく 。 
	( data という * 実数 , pnum という 整数 , indicesData という * 整数32 , vnum という 整数 , c という ベクトル3D , p という ベクトル2D , s という 整数 , zI という 実数 ) を とり スプライト という 関数 を おく 。 ここから
		vertices に data を 代入する 。 
		pointNum に pnum を 代入する 。 
		indices に indicesData を 代入する 。 
		vertexNum に vnum を 代入する 。 
		zIndex に zI を 代入する 。 
		透明度 に 1.0 を 代入する 。 
		色 に c を 代入する 。 
		座標 に p を 代入する 。 
		scaleX に 1.0 を 代入する 。 
		scaleY に 1.0 を 代入する 。 
		theta に 0.0 を 代入する 。 
		shaderID に s を 代入する 。 
		animations の 配列 する 。 
		modelMat の 単位化 する 。 
		transMat の 単位化 する 。 
		scaleMat の 単位化 する 。 
		rotateMat の 単位化 する 。 
		_objectColorUniform [ 11 ] という 文字 を "objectColor"で 初期化 。 
		_projUniform [ 10 ] という 文字 を "projection"で 初期化 。 
		_modelUniform [ 5 ] という 文字 を "model"で 初期化 。 
		_samplerUniform [ 8 ] という 文字 を "uSampler"で 初期化 。 
		_transparencyUniform [ 12 ] という 文字 を "transparency"で 初期化 。 
		objectColorUniform という 文字列 の オブジェクト を & _objectColorUniform , 11 で 初期化 。 
		projUniform という 文字列 の オブジェクト を & _projUniform , 10 で 初期化 。 
		modelUniform という 文字列 の オブジェクト を & _modelUniform , 5 で 初期化 。 
		samplerUniform という 文字列 の オブジェクト を & _samplerUniform , 8 で 初期化 。 
		transparencyUniform という 文字列 の オブジェクト を & _transparencyUniform , 12 で 初期化 。 
		projMatUniformLoc に glGetUniformLocation ( shaderID , projUniform ) を 代入する 。 
		modelMatUniformLoc に glGetUniformLocation ( shaderID , modelUniform ) を 代入する 。 
		もし shaderID  は 4 ならば ここから
			transparencyUniLoc に glGetUniformLocation ( shaderID , transparencyUniform ) を 代入する 。 
			objectColorUniLoc に glGetUniformLocation ( shaderID , objectColorUniform ) を 代入する 。 
		ここまで実行 
		もし shaderID  は 3 ならば ここから
			samplerUniformLoc に glGetUniformLocation ( shaderID , samplerUniform ) を 代入する 。 
		ここまで実行 
		buffer に glCreateBuffer ( ) を 代入する 。 
		34962 , buffer glBindBuffer する 。 
		34962 , vertices , pnum  * 3 , 35044 glBufferData する 。 
		もし vnum  > 0 ならば ここから
			elementBuffer に glCreateBuffer ( ) を 代入する 。 
			34963 , elementBuffer glBindBuffer する 。 
			34963 , indices , vnum , 35044 glElementBufferData する 。 
		ここまで実行 
	ここまで実行 
	( tex という * 実数 , url という 文字列 ) を とり ${"ja":"テクスチャ設定", "natja":"テクスチャ設定", "en":"setTexture", "naten":"setTexture"}$ という 関数 を おく 。 ここから
		shaderID に 0 を 代入する 。 
		texCoords に tex を 代入する 。 
		texture に テクスチャロード ( url の content , url の 長さ ) を 代入する 。 
		url の content , url の 長さ _文字列表示 する 。 
		texCoordBuffer に glCreateBuffer ( ) を 代入する 。 
		34962 , texCoordBuffer glBindBuffer する 。 
		34962 , tex , vertexNum  * 2 , 35044 glBufferData する 。 
	ここまで実行 
	( tex という * 実数 , テクスチャ という 整数32 ) を とり ${"ja":"リピートテクスチャ設定", "natja":"リピートテクスチャ設定", "en":"setRepeatTexture", "naten":"setRepeatTexture"}$ という 関数 を おく 。 ここから
		shaderID に 0 を 代入する 。 
		texCoords に tex を 代入する 。 
		texture に テクスチャ を 代入する 。 
		texCoordBuffer に glCreateBuffer ( ) を 代入する 。 
		34962 , texCoordBuffer glBindBuffer する 。 
		34962 , tex , vertexNum  * 2 , 35044 glBufferData する 。 
	ここまで実行 
	( coord という ベクトル2D ) を とり ${"ja":"座標設定", "natja":"座標設定", "en":"setPos", "naten":"setPos"}$ という 関数 を おく 。 ここから
		座標 に coord を 代入する 。 
	ここまで実行 
	( offset という ベクトル2D ) を とり ${"ja":"移動", "natja":"移動", "en":"translate", "naten":"translate"}$ という 関数 を おく 。 ここから
		座標 に ベクトル2Dの和 ( 座標 , offset ) を 代入する 。 
	ここまで実行 
	( x という 実数 , y という 実数 ) を とり ${"ja":"拡大縮小", "natja":"拡大縮小", "en":"scale", "naten":"scale"}$ という 関数 を おく 。 ここから
		scaleX に scaleX  * x を 代入する 。 
		scaleY に scaleY  * y を 代入する 。 
	ここまで実行 
	( t という 実数 ) を とり ${"ja":"回転", "natja":"回転", "en":"rotate", "naten":"rotate"}$ という 関数 を おく 。 ここから
		theta に theta  + t を 代入する 。 
	ここまで実行 
	( t という 実数 ) を とり ${"ja":"角度設定", "natja":"角度設定", "en":"setAngle", "naten":"setAngle"}$ という 関数 を おく 。 ここから
		theta に t を 代入する 。 
	ここまで実行 
	( x という 実数 ) を とり ${"ja":"重なり順設定", "natja":"重なり順設定", "en":"setZIndex", "naten":"setZIndex"}$ という 関数 を おく 。 ここから
		zIndex に x を 代入する 。 
	ここまで実行 
	( x という 実数 ) を とり ${"ja":"透明度設定", "natja":"透明度設定", "en":"setTransparency", "naten":"setTransparency"}$ という 関数 を おく 。 ここから
		透明度 に x を 代入する 。 
	ここまで実行 
	( 色 という ベクトル3D ) を とり ${"ja":"色設定", "natja":"色設定", "en":"setColor", "naten":"setColor"}$ という 関数 を おく 。 ここから
		色 に 色 を 代入する 。 
	ここまで実行 
	( projMat という 行列4x4 ) を とり ${"ja":"描画", "natja":"描画", "en":"draw", "naten":"draw"}$ という 関数 を おく 。 ここから
		PI という 実数 を 3.14159265358979312 で 初期化 。 
		( カウンタ という 整数 を 0 で 初期化 。 ) から ( カウンタ  は animations の size ) まで ( カウンタ に カウンタ  + 1 を 代入する 。 ) 繰り返し ここから
			info という アニメーション情報 を animations の 取得 ( カウンタ ) で 初期化 。 
			もし ( info の startTime  <= 時間計測 ( ) )  && ( ( info の startTime  + info の duration )  >= 時間計測 ( ) ) ならば ここから
				もし info の id  は 0 ならば ここから
					elapsedTime という 実数 を 時間計測 ( )  - info の startTime で 初期化 。 
					info の info の x  * elapsedTime 回転 する 。 
				ここまで実行 
				もし info の id  は 1 ならば ここから
					info の info の x , info の info の y 拡大縮小 する 。 
				ここまで実行 
				もし info の id  は 2 ならば ここから
					elapsedTime という 実数 を 時間計測 ( )  - info の startTime で 初期化 。 
					offset という ベクトル2D の オブジェクト を info の info の x  * elapsedTime , info の info の y  * elapsedTime で 初期化 。 
					offset 移動 する 。 
				ここまで実行 
			ここまで実行 
		ここまで実行 
		pos3d という ベクトル3D の オブジェクト を 座標 の x , 座標 の y , 0  - zIndex  * 0.00100000000000000002 で 初期化 。 
		transMat の 単位化 する 。 
		pos3d transMat の 移動 する 。 
		scaleMat の 単位化 する 。 
		scaleX , scaleY , 1.0 scaleMat の 拡大縮小 する 。 
		回転軸 という ベクトル3D の オブジェクト を 0.0 , 0.0 , 1.0 で 初期化 。 
		rotateMat の 単位化 する 。 
		回転軸 , theta rotateMat の 回転 する 。 
		modelMat の 単位化 する 。 
		modelMat に 行列4x4の積 ( scaleMat , modelMat ) を 代入する 。 
		modelMat に 行列4x4の積 ( rotateMat , modelMat ) を 代入する 。 
		modelMat に 行列4x4の積 ( transMat , modelMat ) を 代入する 。 
		shaderID glUseProgram する 。 
		34962 , buffer glBindBuffer する 。 
		0 glEnableVertexAttribArray する 。 
		0 , 3 , 5126 , 0 , 0 , 0 glVertexAttribPointer する 。 
		もし shaderID  は 4 ならば ここから
			transparencyUniLoc , 透明度 glUniform1f する 。 
			objectColorUniLoc , 色 の x , 色 の y , 色 の z glUniform3f する 。 
		ここまで実行 
		もし shaderID  は 3 ならば ここから
			34962 , texCoordBuffer glBindBuffer する 。 
			1 glEnableVertexAttribArray する 。 
			1 , 2 , 5126 , 0 , 0 , 0 glVertexAttribPointer する 。 
			texture  + 33984 glActiveTexture する 。 
			3553 , texture glBindTexture する 。 
			samplerUniformLoc , texture glUniform1i する 。 
		ここまで実行 
		projMatUniformLoc , 0 , projMat の matrix glUniformMatrix4fv する 。 
		modelMatUniformLoc , 0 , modelMat の matrix glUniformMatrix4fv する 。 
		もし vertexNum  > 0 ならば ここから
			34963 , elementBuffer glBindBuffer する 。 
			4 , vertexNum , 5123 , 0 glDrawElements する 。 
		ここまで実行 
		もし ( vertexNum  は 0 )  && ( shaderID  は 4 ) ならば ここから
			34962 , buffer glBindBuffer する 。 
			5 , 0 , pointNum glDrawArrays する 。 
		ここまで実行 
		rotateMat の 単位化 する 。 
		transMat の 単位化 する 。 
		scaleMat の 単位化 する 。 
	ここまで実行 
	( theta という 実数 , start という 実数 , duration という 実数 ) を とり ${"ja":"回転アニメーション", "natja":"回転アニメーション", "en":"rotateAnimation", "naten":"rotateAnimation"}$ という 関数 を おく 。 ここから
		temp という アニメーション情報 の オブジェクト を 0 , start , duration , theta , 0.0 で 初期化 。 
		temp animations の 追加 する 。 
	ここまで実行 
	( x という 実数 , y という 実数 , start という 実数 , duration という 実数 ) を とり ${"ja":"拡大縮小アニメーション", "natja":"拡大縮小アニメーション", "en":"scaleAnimation", "naten":"scaleAnimation"}$ という 関数 を おく 。 ここから
		temp という アニメーション情報 の オブジェクト を 1 , start , duration , x , y で 初期化 。 
		temp animations の 追加 する 。 
	ここまで実行 
	( offset という ベクトル2D , start という 実数 , duration という 実数 ) を とり ${"ja":"移動アニメーション", "natja":"移動アニメーション", "en":"translateAnimation", "naten":"translateAnimation"}$ という 関数 を おく 。 ここから
		temp という アニメーション情報 の オブジェクト を 0 , start , duration , offset の x , offset の y で 初期化 。 
		temp animations の 追加 する 。 
	ここまで実行 
非公開 : 	vertices という * 実数 を おく 。 
	indices という * 整数32 を おく 。 
	texCoords という * 実数 を おく 。 
	vertexNum という 整数 を おく 。 
	pointNum という 整数 を おく 。 
	buffer という 整数32 を おく 。 
	texCoordBuffer という 整数32 を おく 。 
	elementBuffer という 整数32 を おく 。 
	texture という 整数32 を おく 。 
	modelMat という 行列4x4 を おく 。 
	transMat という 行列4x4 を おく 。 
	scaleMat という 行列4x4 を おく 。 
	rotateMat という 行列4x4 を おく 。 
	zIndex という 実数 を おく 。 
	shaderID という 整数 を おく 。 
	objectColorUniLoc という 整数32 を おく 。 
	transparencyUniLoc という 整数32 を おく 。 
	projMatUniformLoc という 整数32 を おく 。 
	modelMatUniformLoc という 整数32 を おく 。 
	samplerUniformLoc という 整数32 を おく 。 
	animations という 配列 < アニメーション情報 > を おく 。 
	透明度 という 実数 を おく 。 
	scaleX という 実数 を おく 。 
	scaleY という 実数 を おく 。 
	theta という 実数 を おく 。 
} 
クラス : ${"ja":"シーン2D", "natja":"シーン2D", "en":"Scene2D", "naten":"Scene2D"}$ {
公開 : 	${"ja":"スプライト配列", "natja":"スプライト配列", "en":"sprites", "naten":"sprites"}$ という 配列 < * スプライト > を おく 。 
	${"ja":"背景色", "natja":"背景色", "en":"backgroundColor", "naten":"backgroundColor"}$ という ベクトル3D を おく 。 
	${"ja":"背景透明度", "natja":"背景透明度", "en":"backgroundTransparency", "naten":"backgroundTransparency"}$ という 実数 を おく 。 
	( 高さ という 実数 , 色 という ベクトル3D ) を とり シーン2D という 関数 を おく 。 ここから
		last に 時間計測 ( )  / 1000.0 を 代入する 。 
		now に 0.0 を 代入する 。 
		elapsedTime に 0.0 を 代入する 。 
		projMat の 単位化 する 。 
		projMat に 視点行列2D ( projMat , ( 0  - 高さ )  * ( 16.0  / 9.0 ) , ( 高さ )  * ( 16.0  / 9.0 ) , 0  - 高さ , 高さ , 0.0  - 5.0 , 5.0 ) を 代入する 。 
		スプライト配列 の 配列 する 。 
		背景色 に 色 を 代入する 。 
		背景透明度 に 1.0 を 代入する 。 
	ここまで実行 
	( a という 実数 ) を とり ${"ja":"背景透明度設定", "natja":"背景透明度設定", "en":"setBackgroundTransparency", "naten":"setBackgroundTransparency"}$ という 関数 を おく 。 ここから
		背景透明度 に a を 代入する 。 
	ここまで実行 
	関数 ${"ja":"描画", "natja":"描画", "en":"draw", "naten":"draw"}$ を おく 。 ここから
		now に 時間計測 ( )  / 1000.0 を 代入する 。 
		elapsedTime に now  - last を 代入する 。 
		last に now を 代入する 。 
		背景色 の x , 背景色 の y , 背景色 の z , 背景透明度 glClearColor する 。 
		1.0 glClearDepth する 。 
		2929 glEnable する 。 
		515 glDepthFunc する 。 
		3042 glEnable する 。 
		770 , 771 glBlendFunc する 。 
		16640 glClear する 。 
		( i という 整数 を 0 で 初期化 。 ) から ( i  は スプライト配列 の size ) まで ( i に i  + 1 を 代入する 。 ) 繰り返し ここから
			projMat スプライト配列 の 取得 ( i ) -> 描画 する 。 
		ここまで実行 
	ここまで実行 
	( size という 実数 , 座標 という ベクトル2D , 色 という ベクトル3D , zIndex という 実数 ) を とり ( id という 整数 ) を 返す ${"ja":"正方形追加", "natja":"正方形追加", "en":"addSquare", "naten":"addSquare"}$ という 関数 を おく 。 ここから
		vertices [ 4 ] [ 3 ] という 実数 を [ [ size  / 2 , size  / 2 , 0  - zIndex  * 0.00100000000000000002 ] , [ size  / 2 , 0  - size  / 2 , 0  - zIndex  * 0.00100000000000000002 ] , [ 0  - size  / 2 , 0  - size  / 2 , 0  - zIndex  * 0.00100000000000000002 ] , [ 0  - size  / 2 , size  / 2 , 0  - zIndex  * 0.00100000000000000002 ] ] で 初期化 。 
		texCoords [ 4 ] [ 2 ] という 実数 を [ [ 1.0 , 0.0 ] , [ 1.0 , 1.0 ] , [ 0.0 , 1.0 ] , [ 0.0 , 0.0 ] ] で 初期化 。 
		indices [ 6 ] という 整数32 を [ 0 , 1 , 3 , 1 , 2 , 3 ] で 初期化 。 
		sprite という * スプライト を メモリ確保 ( バイト数 ( sprite に ある オブジェクト ) ) で 初期化 。 
		& vertices , 4 , & indices , 6 , 色 , 座標 , 4 , zIndex sprite -> スプライト する 。 
		sprite スプライト配列 の 追加 する 。 
		id に スプライト配列 の 長さ ( )  - 1 を 代入する 。 
	ここまで実行 
	( width という 実数 , height という 実数 , 座標 という ベクトル2D , url という 文字列 , zIndex という 実数 ) を とり ( id という 整数 ) を 返す ${"ja":"スプライト追加", "natja":"スプライト追加", "en":"addSprite", "naten":"addSprite"}$ という 関数 を おく 。 ここから
		vertices [ 4 ] [ 3 ] という 実数 を [ [ width  / 2 , height  / 2 , 0  - zIndex  * 0.00100000000000000002 ] , [ width  / 2 , 0  - height  / 2 , 0  - zIndex  * 0.00100000000000000002 ] , [ 0  - width  / 2 , 0  - height  / 2 , 0  - zIndex  * 0.00100000000000000002 ] , [ 0  - width  / 2 , height  / 2 , 0  - zIndex  * 0.00100000000000000002 ] ] で 初期化 。 
		texCoords [ 4 ] [ 2 ] という 実数 を [ [ 1.0 , 0.0 ] , [ 1.0 , 1.0 ] , [ 0.0 , 1.0 ] , [ 0.0 , 0.0 ] ] で 初期化 。 
		indices [ 6 ] という 整数32 を [ 0 , 1 , 3 , 1 , 2 , 3 ] で 初期化 。 
		色 という ベクトル3D の オブジェクト を 0.0 , 0.0 , 0.0 で 初期化 。 
		sprite という * スプライト を メモリ確保 ( バイト数 ( sprite に ある オブジェクト ) ) で 初期化 。 
		& vertices , 4 , & indices , 6 , 色 , 座標 , 3 , zIndex sprite -> スプライト する 。 
		& texCoords , url sprite -> テクスチャ設定 する 。 
		sprite スプライト配列 の 追加 する 。 
		id に スプライト配列 の 長さ ( )  - 1 を 代入する 。 
	ここまで実行 
	( width という 実数 , height という 実数 , 座標 という ベクトル2D , texture という 整数32 , zIndex という 実数 ) を とり ( id という 整数 ) を 返す ${"ja":"リピートスプライト追加", "natja":"リピートスプライト追加", "en":"addRepeatSprite", "naten":"addRepeatSprite"}$ という 関数 を おく 。 ここから
		vertices [ 4 ] [ 3 ] という 実数 を [ [ width  / 2 , height  / 2 , 0  - zIndex  * 0.00100000000000000002 ] , [ width  / 2 , 0  - height  / 2 , 0  - zIndex  * 0.00100000000000000002 ] , [ 0  - width  / 2 , 0  - height  / 2 , 0  - zIndex  * 0.00100000000000000002 ] , [ 0  - width  / 2 , height  / 2 , 0  - zIndex  * 0.00100000000000000002 ] ] で 初期化 。 
		texCoords [ 4 ] [ 2 ] という 実数 を [ [ 1.0 , 0.0 ] , [ 1.0 , 1.0 ] , [ 0.0 , 1.0 ] , [ 0.0 , 0.0 ] ] で 初期化 。 
		indices [ 6 ] という 整数32 を [ 0 , 1 , 3 , 1 , 2 , 3 ] で 初期化 。 
		色 という ベクトル3D の オブジェクト を 0.0 , 0.0 , 0.0 で 初期化 。 
		sprite という * スプライト を メモリ確保 ( バイト数 ( sprite に ある オブジェクト ) ) で 初期化 。 
		& vertices , 4 , & indices , 6 , 色 , 座標 , 3 , zIndex sprite -> スプライト する 。 
		& texCoords , texture sprite -> リピートテクスチャ設定 する 。 
		sprite スプライト配列 の 追加 する 。 
		id に スプライト配列 の 長さ ( )  - 1 を 代入する 。 
	ここまで実行 
	( width という 実数 , height という 実数 , 座標 という ベクトル2D , 色 という ベクトル3D , zIndex という 実数 ) を とり ( id という 整数 ) を 返す ${"ja":"四角形追加", "natja":"四角形追加", "en":"addRectangle", "naten":"addRectangle"}$ という 関数 を おく 。 ここから
		vertices [ 4 ] [ 3 ] という 実数 を [ [ width  / 2 , height  / 2 , 0  - zIndex  * 0.00100000000000000002 ] , [ 0  - width  / 2 , height  / 2 , 0  - zIndex  * 0.00100000000000000002 ] , [ width  / 2 , 0  - height  / 2 , 0  - zIndex  * 0.00100000000000000002 ] , [ 0  - width  / 2 , 0  - height  / 2 , 0  - zIndex  * 0.00100000000000000002 ] ] で 初期化 。 
		sprite という * スプライト を メモリ確保 ( バイト数 ( sprite に ある オブジェクト ) ) で 初期化 。 
		& vertices , 4 , メモリ確保 ( 0 ) , 0 , 色 , 座標 , 4 , zIndex sprite -> スプライト する 。 
		sprite スプライト配列 の 追加 する 。 
		id に スプライト配列 の 長さ ( )  - 1 を 代入する 。 
	ここまで実行 
	( points という 配列 < ベクトル2D > , 座標 という ベクトル2D , 色 という ベクトル3D , zIndex という 実数 ) を とり ( id という 整数 ) を 返す ${"ja":"多角形追加", "natja":"多角形追加", "en":"addPolygon", "naten":"addPolygon"}$ という 関数 を おく 。 ここから
		temp という 配列 < 実数 > を おく 。 
		points の 長さ ( ) 回繰り返す ここから
			points の content [ カウンタ ] の x temp の 追加 する 。 
			points の content [ カウンタ ] の y temp の 追加 する 。 
			0  - zIndex  * 0.00100000000000000002 temp の 追加 する 。 
		ここまで実行 
		sprite という * スプライト を メモリ確保 ( バイト数 ( sprite に ある オブジェクト ) ) で 初期化 。 
		temp の content , temp の 長さ ( )  / 3 , メモリ確保 ( 0 ) , 0 , 色 , 座標 , 4 , zIndex sprite -> スプライト する 。 
		sprite スプライト配列 の 追加 する 。 
		id に スプライト配列 の 長さ ( )  - 1 を 代入する 。 
	ここまで実行 
	( r という 実数 , 座標 という ベクトル2D , 色 という ベクトル3D , zIndex という 実数 ) を とり ( id という 整数 ) を 返す ${"ja":"円追加", "natja":"円追加", "en":"addCircle", "naten":"addCircle"}$ という 関数 を おく 。 ここから
		PI という 実数 を 3.14159265358979312 で 初期化 。 
		points という 配列 < ベクトル2D > を おく 。 
		頂点数 という 整数 を 60 で 初期化 。 
		( i という 整数 を 0 で 初期化 。 ) から ( i  は 頂点数 ) まで ( i に i  + 1 を 代入する 。 ) 繰り返し ここから
			theta という 実数 を 0 で 初期化 。 
			もし ( i  % 2 )  は 0 ならば ここから
				theta に 0.5  * PI  + ( ( PI  * i )  / 頂点数 ) を 代入する 。 
			ここまで実行 
			もし ( i  % 2 )  は 1 ならば ここから
				theta に 0.5  * PI  - ( ( PI  * ( 1.0  + i ) )  / 頂点数 ) を 代入する 。 
			ここまで実行 
			temp という ベクトル2D の オブジェクト を r  * cos ( theta ) , r  * sin ( theta ) で 初期化 。 
			temp points の 追加 する 。 
		ここまで実行 
		id に 多角形追加 ( points , 座標 , 色 , zIndex ) を 代入する 。 
	ここまで実行 
非公開 : 	projMat という 行列4x4 を おく 。 
	last という 実数 を おく 。 
	now という 実数 を おく 。 
	elapsedTime という 実数 を おく 。 
} 
( callback という 関数 : ( ) => ( ) ) を とり 引数なしjsリスナー呼び出し という 関数 を おく 。 ここから
	callback する 。 
ここまで実行 
js書き出し ( 引数なしjsリスナー呼び出し , "jsCallListenerNoParam") 。 
関数 __setUpVariableNamesForSamples を おく 。 ここから
	${"ja":"前の数", "natja":"前の数", "en":"numberBefore", "naten":"numberBefore"}$ という 実数 を おく 。 
	${"ja":"数", "natja":"数", "en":"number", "naten":"number"}$ という 実数 を おく 。 
	${"ja":"入力", "natja":"入力", "en":"input", "naten":"input"}$ という 実数 を おく 。 
	${"ja":"出力", "natja":"出力", "en":"output", "naten":"output"}$ という 実数 を おく 。 
	${"ja":"返り値", "natja":"返り値", "en":"returnValue", "naten":"returnValue"}$ という 実数 を おく 。 
	${"ja":"初期数", "natja":"初期数", "en":"initialNumber", "naten":"initialNumber"}$ という 実数 を おく 。 
	${"ja":"コラッツ", "natja":"コラッツ", "en":"collatz", "naten":"collatz"}$ という 実数 を おく 。 
	${"ja":"結果", "natja":"結果", "en":"result", "naten":"result"}$ という 実数 を おく 。 
	${"ja":"かける数", "natja":"かける数", "en":"numberToMultiply", "naten":"numberToMultiply"}$ という 実数 を おく 。 
	${"ja":"ワールド", "natja":"ワールド", "en":"world", "naten":"world"}$ という 実数 を おく 。 
	${"ja":"光源座標", "natja":"光源座標", "en":"lightPosition", "naten":"lightPosition"}$ という 実数 を おく 。 
	${"ja":"回転軸", "natja":"回転軸", "en":"axis", "naten":"axis"}$ という 実数 を おく 。 
	${"ja":"位置", "natja":"位置", "en":"position", "naten":"position"}$ という 実数 を おく 。 
	${"ja":"キューブID", "natja":"キューブID", "en":"cubeID", "naten":"cubeID"}$ という 実数 を おく 。 
	${"ja":"光源ID", "natja":"光源ID", "en":"lightID", "naten":"lightID"}$ という 実数 を おく 。 
	${"ja":"キューブIDリスト", "natja":"キューブIDリスト", "en":"cubeIDlist", "naten":"cubeIDlist"}$ という 実数 を おく 。 
	${"ja":"回数", "natja":"回数", "en":"numberOfTimes", "naten":"numberOfTimes"}$ という 実数 を おく 。 
	${"ja":"初期位置", "natja":"初期位置", "en":"initialPosition", "naten":"initialPosition"}$ という 実数 を おく 。 
	${"ja":"幅", "natja":"幅", "en":"width", "naten":"width"}$ という 実数 を おく 。 
	${"ja":"高さ", "natja":"高さ", "en":"height", "naten":"height"}$ という 実数 を おく 。 
	${"ja":"質量", "natja":"質量", "en":"mass", "naten":"mass"}$ という 実数 を おく 。 
	${"ja":"慣性モーメント", "natja":"慣性モーメント", "en":"momentOfInertia", "naten":"momentOfInertia"}$ という 実数 を おく 。 
	${"ja":"速度", "natja":"速度", "en":"velocity", "naten":"velocity"}$ という 実数 を おく 。 
	${"ja":"角度", "natja":"角度", "en":"angle", "naten":"angle"}$ という 実数 を おく 。 
	${"ja":"角速度", "natja":"角速度", "en":"angularVelocity", "naten":"angularVelocity"}$ という 実数 を おく 。 
	${"ja":"力", "natja":"力", "en":"force", "naten":"force"}$ という 実数 を おく 。 
	${"ja":"トルク", "natja":"トルク", "en":"torque", "naten":"torque"}$ という 実数 を おく 。 
	${"ja":"形", "natja":"形", "en":"shape", "naten":"shape"}$ という 実数 を おく 。 
	${"ja":"物理ワールド2D", "natja":"物理ワールド2D", "en":"physicsWorld2D", "naten":"physicsWorld2D"}$ という 実数 を おく 。 
	${"ja":"物体配列", "natja":"物体配列", "en":"bodyArray", "naten":"bodyArray"}$ という 実数 を おく 。 
	${"ja":"重力加速度", "natja":"重力加速度", "en":"gravitationalAccelaration", "naten":"gravitationalAccelaration"}$ という 実数 を おく 。 
	${"ja":"前回の時間", "natja":"前回の時間", "en":"timeBefore", "naten":"timeBefore"}$ という 実数 を おく 。 
	${"ja":"物体追加", "natja":"物体追加", "en":"addBody", "naten":"addBody"}$ という 実数 を おく 。 
	${"ja":"重力", "natja":"重力", "en":"gravity", "naten":"gravity"}$ という 実数 を おく 。 
	${"ja":"アップデート", "natja":"アップデート", "en":"update", "naten":"update"}$ という 実数 を おく 。 
	${"ja":"経過時間", "natja":"経過時間", "en":"timePassed", "naten":"timePassed"}$ という 実数 を おく 。 
	${"ja":"角加速度", "natja":"角加速度", "en":"angularAccelaration", "naten":"angularAccelaration"}$ という 実数 を おく 。 
	${"ja":"物理ワールド", "natja":"物理ワールド", "en":"physicsWorld", "naten":"physicsWorld"}$ という 実数 を おく 。 
	${"ja":"初速度", "natja":"初速度", "en":"initialVelocity", "naten":"initialVelocity"}$ という 実数 を おく 。 
	${"ja":"初速度", "natja":"初速度", "en":"initialVelocity", "naten":"initialVelocity"}$ という 実数 を おく 。 
	${"ja":"素数", "natja":"素数", "en":"primeNumbers", "naten":"primeNumbers"}$ という 実数 を おく 。 
	${"ja":"フラグ", "natja":"フラグ", "en":"flag", "naten":"flag"}$ という 実数 を おく 。 
	${"ja":"漸化式", "natja":"漸化式", "en":"recursion", "naten":"recursion"}$ という 実数 を おく 。 
	${"ja":"変数1", "natja":"変数1", "en":"variable1", "naten":"variable1"}$ という 実数 を おく 。 
	${"ja":"変数2", "natja":"変数2", "en":"variable2", "naten":"variable2"}$ という 実数 を おく 。 
	${"ja":"変数3", "natja":"変数3", "en":"variable3", "naten":"variable3"}$ という 実数 を おく 。 
	${"ja":"変数4", "natja":"変数4", "en":"variable4", "naten":"variable4"}$ という 実数 を おく 。 
	${"ja":"変数5", "natja":"変数5", "en":"variable5", "naten":"variable5"}$ という 実数 を おく 。 
	${"ja":"変数6", "natja":"変数6", "en":"variable6", "naten":"variable6"}$ という 実数 を おく 。 
	${"ja":"変数7", "natja":"変数7", "en":"variable7", "naten":"variable7"}$ という 実数 を おく 。 
	${"ja":"変数8", "natja":"変数8", "en":"variable8", "naten":"variable8"}$ という 実数 を おく 。 
	${"ja":"変数9", "natja":"変数9", "en":"variable9", "naten":"variable9"}$ という 実数 を おく 。 
ここまで実行 
クラス : ArduinoClass {
公開 : 	${"ja":"出力ピン", "natja":"出力ピン", "en":"OUTPUT", "naten":"OUTPUT"}$ という 文字 を おく 。 
	${"ja":"入力ピン", "natja":"入力ピン", "en":"INPUT", "naten":"INPUT"}$ という 文字 を おく 。 
	関数 ArduinoClass を おく 。 ここから
		出力ピン に '出'を 代入する 。 
		入力ピン に '入'を 代入する 。 
	ここまで実行 
} 
( ピン番号 という 整数 ) を とり ${"ja":"Arduino5V送る", "natja":"Arduino5V送る", "en":"ArduinoOutput5V", "naten":"ArduinoOutput5V"}$ という 関数 を おく 。 ここから
	'H', ピン番号 Arduinoコマンド送信 する 。 
ここまで実行 
( ピン番号 という 整数 ) を とり ${"ja":"Arduino0V送る", "natja":"Arduino0V送る", "en":"ArduinoOutput0V", "naten":"ArduinoOutput0V"}$ という 関数 を おく 。 ここから
	'L', ピン番号 Arduinoコマンド送信 する 。 
ここまで実行 
( ピン番号 という 整数 , 入出力 という 文字 ) を とり ${"ja":"Arduinoピン入出力設定", "natja":"Arduinoピン入出力設定", "en":"ArduinoSetPinmode", "naten":"ArduinoSetPinmode"}$ という 関数 を おく 。 ここから
	もし 入出力  は '入'ならば ここから
		'I', ピン番号 Arduinoコマンド送信 する 。 
	ここまで実行 
	もし 入出力  は '出'ならば ここから
		'O', ピン番号 Arduinoコマンド送信 する 。 
	ここまで実行 
ここまで実行 
( ピン番号 という 整数 ) を とり ${"ja":"Arduinoアナログ入力ピン設定", "natja":"Arduinoアナログ入力ピン設定", "en":"ArduinoSetAnalogInputPin", "naten":"ArduinoSetAnalogInputPin"}$ という 関数 を おく 。 ここから
	'A', ピン番号 Arduinoコマンド送信 する 。 
ここまで実行 
( ピン番号 という 整数 ) を とり ${"ja":"ArduinoHCSR04設定", "natja":"ArduinoHCSR04設定", "en":"ArduinoHCSR04Trigger", "naten":"ArduinoHCSR04Trigger"}$ という 関数 を おく 。 ここから
	'T', ピン番号 Arduinoコマンド送信 する 。 
ここまで実行 
